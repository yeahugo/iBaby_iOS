/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "shy_server.h"

@implementation ReqHead

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBabyId: (int32_t) babyId guid: (NSString *) guid version: (NSString *) version
{
  self = [super init];
  __babyId = babyId;
  __babyId_isset = YES;
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"babyId"])
  {
    __babyId = [decoder decodeInt32ForKey: @"babyId"];
    __babyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__babyId_isset)
  {
    [encoder encodeInt32: __babyId forKey: @"babyId"];
  }
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__version release_stub];
  [super dealloc_stub];
}

- (int32_t) babyId {
  return __babyId;
}

- (void) setBabyId: (int32_t) babyId {
  __babyId = babyId;
  __babyId_isset = YES;
}

- (BOOL) babyIdIsSet {
  return __babyId_isset;
}

- (void) unsetBabyId {
  __babyId_isset = NO;
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBabyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqHead"];
  if (__babyId_isset) {
    [outProtocol writeFieldBeginWithName: @"babyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __babyId];
    [outProtocol writeFieldEnd];
  }
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__babyId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'babyId' is not set."];
  }
  if (!__guid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'guid' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReqHead("];
  [ms appendString: @"babyId:"];
  [ms appendFormat: @"%i", __babyId];
  [ms appendString: @",guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegisterResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBabyId: (int32_t) babyId pwd: (NSString *) pwd resCode: (int32_t) resCode
{
  self = [super init];
  __babyId = babyId;
  __babyId_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"babyId"])
  {
    __babyId = [decoder decodeInt32ForKey: @"babyId"];
    __babyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__babyId_isset)
  {
    [encoder encodeInt32: __babyId forKey: @"babyId"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__pwd release_stub];
  [super dealloc_stub];
}

- (int32_t) babyId {
  return __babyId;
}

- (void) setBabyId: (int32_t) babyId {
  __babyId = babyId;
  __babyId_isset = YES;
}

- (BOOL) babyIdIsSet {
  return __babyId_isset;
}

- (void) unsetBabyId {
  __babyId_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBabyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterResp"];
  if (__babyId_isset) {
    [outProtocol writeFieldBeginWithName: @"babyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __babyId];
    [outProtocol writeFieldEnd];
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__babyId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'babyId' is not set."];
  }
  if (!__pwd_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pwd' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterResp("];
  [ms appendString: @"babyId:"];
  [ms appendFormat: @"%i", __babyId];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head pwd: (NSString *) pwd
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__pwd release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__pwd_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pwd' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBabyId: (int32_t) babyId uname: (NSString *) uname resCode: (int32_t) resCode
{
  self = [super init];
  __babyId = babyId;
  __babyId_isset = YES;
  __uname = [uname retain_stub];
  __uname_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"babyId"])
  {
    __babyId = [decoder decodeInt32ForKey: @"babyId"];
    __babyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"uname"])
  {
    __uname = [[decoder decodeObjectForKey: @"uname"] retain_stub];
    __uname_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__babyId_isset)
  {
    [encoder encodeInt32: __babyId forKey: @"babyId"];
  }
  if (__uname_isset)
  {
    [encoder encodeObject: __uname forKey: @"uname"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__uname release_stub];
  [super dealloc_stub];
}

- (int32_t) babyId {
  return __babyId;
}

- (void) setBabyId: (int32_t) babyId {
  __babyId = babyId;
  __babyId_isset = YES;
}

- (BOOL) babyIdIsSet {
  return __babyId_isset;
}

- (void) unsetBabyId {
  __babyId_isset = NO;
}

- (NSString *) uname {
  return [[__uname retain_stub] autorelease_stub];
}

- (void) setUname: (NSString *) uname {
  [uname retain_stub];
  [__uname release_stub];
  __uname = uname;
  __uname_isset = YES;
}

- (BOOL) unameIsSet {
  return __uname_isset;
}

- (void) unsetUname {
  [__uname release_stub];
  __uname = nil;
  __uname_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBabyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUname: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginResp"];
  if (__babyId_isset) {
    [outProtocol writeFieldBeginWithName: @"babyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __babyId];
    [outProtocol writeFieldEnd];
  }
  if (__uname_isset) {
    if (__uname != nil) {
      [outProtocol writeFieldBeginWithName: @"uname" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __uname];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__babyId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'babyId' is not set."];
  }
  if (!__uname_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'uname' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginResp("];
  [ms appendString: @"babyId:"];
  [ms appendFormat: @"%i", __babyId];
  [ms appendString: @",uname:"];
  [ms appendFormat: @"\"%@\"", __uname];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id url: (NSString *) url img: (NSString *) img title: (NSString *) title resourceType: (int) resourceType fileType: (int) fileType desc: (NSString *) desc durationTime: (int32_t) durationTime releaseTime: (int32_t) releaseTime childAge: (int32_t) childAge language: (NSString *) language tags: (NSString *) tags curSection: (int32_t) curSection SectionNum: (int32_t) SectionNum serialId: (NSString *) serialId vid: (NSString *) vid
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __img = [img retain_stub];
  __img_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __resourceType = resourceType;
  __resourceType_isset = YES;
  __fileType = fileType;
  __fileType_isset = YES;
  __desc = [desc retain_stub];
  __desc_isset = YES;
  __durationTime = durationTime;
  __durationTime_isset = YES;
  __releaseTime = releaseTime;
  __releaseTime_isset = YES;
  __childAge = childAge;
  __childAge_isset = YES;
  __language = [language retain_stub];
  __language_isset = YES;
  __tags = [tags retain_stub];
  __tags_isset = YES;
  __curSection = curSection;
  __curSection_isset = YES;
  __SectionNum = SectionNum;
  __SectionNum_isset = YES;
  __serialId = [serialId retain_stub];
  __serialId_isset = YES;
  __vid = [vid retain_stub];
  __vid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"img"])
  {
    __img = [[decoder decodeObjectForKey: @"img"] retain_stub];
    __img_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceType"])
  {
    __resourceType = [decoder decodeIntForKey: @"resourceType"];
    __resourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"fileType"])
  {
    __fileType = [decoder decodeIntForKey: @"fileType"];
    __fileType_isset = YES;
  }
  if ([decoder containsValueForKey: @"desc"])
  {
    __desc = [[decoder decodeObjectForKey: @"desc"] retain_stub];
    __desc_isset = YES;
  }
  if ([decoder containsValueForKey: @"durationTime"])
  {
    __durationTime = [decoder decodeInt32ForKey: @"durationTime"];
    __durationTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"releaseTime"])
  {
    __releaseTime = [decoder decodeInt32ForKey: @"releaseTime"];
    __releaseTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"childAge"])
  {
    __childAge = [decoder decodeInt32ForKey: @"childAge"];
    __childAge_isset = YES;
  }
  if ([decoder containsValueForKey: @"language"])
  {
    __language = [[decoder decodeObjectForKey: @"language"] retain_stub];
    __language_isset = YES;
  }
  if ([decoder containsValueForKey: @"tags"])
  {
    __tags = [[decoder decodeObjectForKey: @"tags"] retain_stub];
    __tags_isset = YES;
  }
  if ([decoder containsValueForKey: @"curSection"])
  {
    __curSection = [decoder decodeInt32ForKey: @"curSection"];
    __curSection_isset = YES;
  }
  if ([decoder containsValueForKey: @"SectionNum"])
  {
    __SectionNum = [decoder decodeInt32ForKey: @"SectionNum"];
    __SectionNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialId"])
  {
    __serialId = [[decoder decodeObjectForKey: @"serialId"] retain_stub];
    __serialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"vid"])
  {
    __vid = [[decoder decodeObjectForKey: @"vid"] retain_stub];
    __vid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__img_isset)
  {
    [encoder encodeObject: __img forKey: @"img"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__resourceType_isset)
  {
    [encoder encodeInt: __resourceType forKey: @"resourceType"];
  }
  if (__fileType_isset)
  {
    [encoder encodeInt: __fileType forKey: @"fileType"];
  }
  if (__desc_isset)
  {
    [encoder encodeObject: __desc forKey: @"desc"];
  }
  if (__durationTime_isset)
  {
    [encoder encodeInt32: __durationTime forKey: @"durationTime"];
  }
  if (__releaseTime_isset)
  {
    [encoder encodeInt32: __releaseTime forKey: @"releaseTime"];
  }
  if (__childAge_isset)
  {
    [encoder encodeInt32: __childAge forKey: @"childAge"];
  }
  if (__language_isset)
  {
    [encoder encodeObject: __language forKey: @"language"];
  }
  if (__tags_isset)
  {
    [encoder encodeObject: __tags forKey: @"tags"];
  }
  if (__curSection_isset)
  {
    [encoder encodeInt32: __curSection forKey: @"curSection"];
  }
  if (__SectionNum_isset)
  {
    [encoder encodeInt32: __SectionNum forKey: @"SectionNum"];
  }
  if (__serialId_isset)
  {
    [encoder encodeObject: __serialId forKey: @"serialId"];
  }
  if (__vid_isset)
  {
    [encoder encodeObject: __vid forKey: @"vid"];
  }
}

- (void) dealloc
{
  [__url release_stub];
  [__img release_stub];
  [__title release_stub];
  [__desc release_stub];
  [__language release_stub];
  [__tags release_stub];
  [__serialId release_stub];
  [__vid release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) img {
  return [[__img retain_stub] autorelease_stub];
}

- (void) setImg: (NSString *) img {
  [img retain_stub];
  [__img release_stub];
  __img = img;
  __img_isset = YES;
}

- (BOOL) imgIsSet {
  return __img_isset;
}

- (void) unsetImg {
  [__img release_stub];
  __img = nil;
  __img_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (int) resourceType {
  return __resourceType;
}

- (void) setResourceType: (int) resourceType {
  __resourceType = resourceType;
  __resourceType_isset = YES;
}

- (BOOL) resourceTypeIsSet {
  return __resourceType_isset;
}

- (void) unsetResourceType {
  __resourceType_isset = NO;
}

- (int) fileType {
  return __fileType;
}

- (void) setFileType: (int) fileType {
  __fileType = fileType;
  __fileType_isset = YES;
}

- (BOOL) fileTypeIsSet {
  return __fileType_isset;
}

- (void) unsetFileType {
  __fileType_isset = NO;
}

- (NSString *) desc {
  return [[__desc retain_stub] autorelease_stub];
}

- (void) setDesc: (NSString *) desc {
  [desc retain_stub];
  [__desc release_stub];
  __desc = desc;
  __desc_isset = YES;
}

- (BOOL) descIsSet {
  return __desc_isset;
}

- (void) unsetDesc {
  [__desc release_stub];
  __desc = nil;
  __desc_isset = NO;
}

- (int32_t) durationTime {
  return __durationTime;
}

- (void) setDurationTime: (int32_t) durationTime {
  __durationTime = durationTime;
  __durationTime_isset = YES;
}

- (BOOL) durationTimeIsSet {
  return __durationTime_isset;
}

- (void) unsetDurationTime {
  __durationTime_isset = NO;
}

- (int32_t) releaseTime {
  return __releaseTime;
}

- (void) setReleaseTime: (int32_t) releaseTime {
  __releaseTime = releaseTime;
  __releaseTime_isset = YES;
}

- (BOOL) releaseTimeIsSet {
  return __releaseTime_isset;
}

- (void) unsetReleaseTime {
  __releaseTime_isset = NO;
}

- (int32_t) childAge {
  return __childAge;
}

- (void) setChildAge: (int32_t) childAge {
  __childAge = childAge;
  __childAge_isset = YES;
}

- (BOOL) childAgeIsSet {
  return __childAge_isset;
}

- (void) unsetChildAge {
  __childAge_isset = NO;
}

- (NSString *) language {
  return [[__language retain_stub] autorelease_stub];
}

- (void) setLanguage: (NSString *) language {
  [language retain_stub];
  [__language release_stub];
  __language = language;
  __language_isset = YES;
}

- (BOOL) languageIsSet {
  return __language_isset;
}

- (void) unsetLanguage {
  [__language release_stub];
  __language = nil;
  __language_isset = NO;
}

- (NSString *) tags {
  return [[__tags retain_stub] autorelease_stub];
}

- (void) setTags: (NSString *) tags {
  [tags retain_stub];
  [__tags release_stub];
  __tags = tags;
  __tags_isset = YES;
}

- (BOOL) tagsIsSet {
  return __tags_isset;
}

- (void) unsetTags {
  [__tags release_stub];
  __tags = nil;
  __tags_isset = NO;
}

- (int32_t) curSection {
  return __curSection;
}

- (void) setCurSection: (int32_t) curSection {
  __curSection = curSection;
  __curSection_isset = YES;
}

- (BOOL) curSectionIsSet {
  return __curSection_isset;
}

- (void) unsetCurSection {
  __curSection_isset = NO;
}

- (int32_t) SectionNum {
  return __SectionNum;
}

- (void) setSectionNum: (int32_t) SectionNum {
  __SectionNum = SectionNum;
  __SectionNum_isset = YES;
}

- (BOOL) SectionNumIsSet {
  return __SectionNum_isset;
}

- (void) unsetSectionNum {
  __SectionNum_isset = NO;
}

- (NSString *) serialId {
  return [[__serialId retain_stub] autorelease_stub];
}

- (void) setSerialId: (NSString *) serialId {
  [serialId retain_stub];
  [__serialId release_stub];
  __serialId = serialId;
  __serialId_isset = YES;
}

- (BOOL) serialIdIsSet {
  return __serialId_isset;
}

- (void) unsetSerialId {
  [__serialId release_stub];
  __serialId = nil;
  __serialId_isset = NO;
}

- (NSString *) vid {
  return [[__vid retain_stub] autorelease_stub];
}

- (void) setVid: (NSString *) vid {
  [vid retain_stub];
  [__vid release_stub];
  __vid = vid;
  __vid_isset = YES;
}

- (BOOL) vidIsSet {
  return __vid_isset;
}

- (void) unsetVid {
  [__vid release_stub];
  __vid = nil;
  __vid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setFileType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDesc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDurationTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReleaseTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setChildAge: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLanguage: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTags: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurSection: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSectionNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 16:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceInfo"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__img_isset) {
    if (__img != nil) {
      [outProtocol writeFieldBeginWithName: @"img" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __img];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __resourceType];
    [outProtocol writeFieldEnd];
  }
  if (__fileType_isset) {
    [outProtocol writeFieldBeginWithName: @"fileType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __fileType];
    [outProtocol writeFieldEnd];
  }
  if (__desc_isset) {
    if (__desc != nil) {
      [outProtocol writeFieldBeginWithName: @"desc" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __desc];
      [outProtocol writeFieldEnd];
    }
  }
  if (__durationTime_isset) {
    [outProtocol writeFieldBeginWithName: @"durationTime" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __durationTime];
    [outProtocol writeFieldEnd];
  }
  if (__releaseTime_isset) {
    [outProtocol writeFieldBeginWithName: @"releaseTime" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __releaseTime];
    [outProtocol writeFieldEnd];
  }
  if (__childAge_isset) {
    [outProtocol writeFieldBeginWithName: @"childAge" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __childAge];
    [outProtocol writeFieldEnd];
  }
  if (__language_isset) {
    if (__language != nil) {
      [outProtocol writeFieldBeginWithName: @"language" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __language];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tags_isset) {
    if (__tags != nil) {
      [outProtocol writeFieldBeginWithName: @"tags" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __tags];
      [outProtocol writeFieldEnd];
    }
  }
  if (__curSection_isset) {
    [outProtocol writeFieldBeginWithName: @"curSection" type: TType_I32 fieldID: 13];
    [outProtocol writeI32: __curSection];
    [outProtocol writeFieldEnd];
  }
  if (__SectionNum_isset) {
    [outProtocol writeFieldBeginWithName: @"SectionNum" type: TType_I32 fieldID: 14];
    [outProtocol writeI32: __SectionNum];
    [outProtocol writeFieldEnd];
  }
  if (__serialId_isset) {
    if (__serialId != nil) {
      [outProtocol writeFieldBeginWithName: @"serialId" type: TType_STRING fieldID: 15];
      [outProtocol writeString: __serialId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__vid_isset) {
    if (__vid != nil) {
      [outProtocol writeFieldBeginWithName: @"vid" type: TType_STRING fieldID: 16];
      [outProtocol writeString: __vid];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__url_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'url' is not set."];
  }
  if (!__img_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'img' is not set."];
  }
  if (!__title_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'title' is not set."];
  }
  if (!__resourceType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceType' is not set."];
  }
  if (!__fileType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'fileType' is not set."];
  }
  if (!__desc_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'desc' is not set."];
  }
  if (!__durationTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'durationTime' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceInfo("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",img:"];
  [ms appendFormat: @"\"%@\"", __img];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",resourceType:"];
  [ms appendFormat: @"%i", __resourceType];
  [ms appendString: @",fileType:"];
  [ms appendFormat: @"%i", __fileType];
  [ms appendString: @",desc:"];
  [ms appendFormat: @"\"%@\"", __desc];
  [ms appendString: @",durationTime:"];
  [ms appendFormat: @"%i", __durationTime];
  [ms appendString: @",releaseTime:"];
  [ms appendFormat: @"%i", __releaseTime];
  [ms appendString: @",childAge:"];
  [ms appendFormat: @"%i", __childAge];
  [ms appendString: @",language:"];
  [ms appendFormat: @"\"%@\"", __language];
  [ms appendString: @",tags:"];
  [ms appendFormat: @"\"%@\"", __tags];
  [ms appendString: @",curSection:"];
  [ms appendFormat: @"%i", __curSection];
  [ms appendString: @",SectionNum:"];
  [ms appendFormat: @"%i", __SectionNum];
  [ms appendString: @",serialId:"];
  [ms appendFormat: @"\"%@\"", __serialId];
  [ms appendString: @",vid:"];
  [ms appendFormat: @"\"%@\"", __vid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head searchKeys: (NSString *) searchKeys resourceType: (int) resourceType startId: (int32_t) startId recordNum: (int32_t) recordNum
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __searchKeys = [searchKeys retain_stub];
  __searchKeys_isset = YES;
  __resourceType = resourceType;
  __resourceType_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchKeys"])
  {
    __searchKeys = [[decoder decodeObjectForKey: @"searchKeys"] retain_stub];
    __searchKeys_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceType"])
  {
    __resourceType = [decoder decodeIntForKey: @"resourceType"];
    __resourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__searchKeys_isset)
  {
    [encoder encodeObject: __searchKeys forKey: @"searchKeys"];
  }
  if (__resourceType_isset)
  {
    [encoder encodeInt: __resourceType forKey: @"resourceType"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__searchKeys release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) searchKeys {
  return [[__searchKeys retain_stub] autorelease_stub];
}

- (void) setSearchKeys: (NSString *) searchKeys {
  [searchKeys retain_stub];
  [__searchKeys release_stub];
  __searchKeys = searchKeys;
  __searchKeys_isset = YES;
}

- (BOOL) searchKeysIsSet {
  return __searchKeys_isset;
}

- (void) unsetSearchKeys {
  [__searchKeys release_stub];
  __searchKeys = nil;
  __searchKeys_isset = NO;
}

- (int) resourceType {
  return __resourceType;
}

- (void) setResourceType: (int) resourceType {
  __resourceType = resourceType;
  __resourceType_isset = YES;
}

- (BOOL) resourceTypeIsSet {
  return __resourceType_isset;
}

- (void) unsetResourceType {
  __resourceType_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchKeys: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchKeys_isset) {
    if (__searchKeys != nil) {
      [outProtocol writeFieldBeginWithName: @"searchKeys" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __searchKeys];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceType" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __resourceType];
    [outProtocol writeFieldEnd];
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__searchKeys_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'searchKeys' is not set."];
  }
  if (!__resourceType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceType' is not set."];
  }
  if (!__startId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'startId' is not set."];
  }
  if (!__recordNum_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'recordNum' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",searchKeys:"];
  [ms appendFormat: @"\"%@\"", __searchKeys];
  [ms appendString: @",resourceType:"];
  [ms appendFormat: @"%i", __resourceType];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResult: (NSMutableArray *) result resCode: (int32_t) resCode
{
  self = [super init];
  __result = [result retain_stub];
  __result_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"result"])
  {
    __result = [[decoder decodeObjectForKey: @"result"] retain_stub];
    __result_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__result_isset)
  {
    [encoder encodeObject: __result forKey: @"result"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__result release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) result {
  return [[__result retain_stub] autorelease_stub];
}

- (void) setResult: (NSMutableArray *) result {
  [result retain_stub];
  [__result release_stub];
  __result = result;
  __result_isset = YES;
}

- (BOOL) resultIsSet {
  return __result_isset;
}

- (void) unsetResult {
  [__result release_stub];
  __result = nil;
  __result_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ResourceInfo *_elem2 = [[ResourceInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setResult: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchResp"];
  if (__result_isset) {
    if (__result != nil) {
      [outProtocol writeFieldBeginWithName: @"result" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__result count]];
        int i4;
        for (i4 = 0; i4 < [__result count]; i4++)
        {
          [[__result objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__result_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'result' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchResp("];
  [ms appendString: @"result:"];
  [ms appendFormat: @"%@", __result];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecommendReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head startId: (int32_t) startId recordNum: (int32_t) recordNum
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecommendReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__startId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'startId' is not set."];
  }
  if (!__recordNum_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'recordNum' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecommendReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecommendResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head recommends: (NSMutableArray *) recommends resCode: (int32_t) resCode
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __recommends = [recommends retain_stub];
  __recommends_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"recommends"])
  {
    __recommends = [[decoder decodeObjectForKey: @"recommends"] retain_stub];
    __recommends_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__recommends_isset)
  {
    [encoder encodeObject: __recommends forKey: @"recommends"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__recommends release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSMutableArray *) recommends {
  return [[__recommends retain_stub] autorelease_stub];
}

- (void) setRecommends: (NSMutableArray *) recommends {
  [recommends retain_stub];
  [__recommends release_stub];
  __recommends = recommends;
  __recommends_isset = YES;
}

- (BOOL) recommendsIsSet {
  return __recommends_isset;
}

- (void) unsetRecommends {
  [__recommends release_stub];
  __recommends = nil;
  __recommends_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            ResourceInfo *_elem7 = [[ResourceInfo alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release_stub];
          }
          [inProtocol readListEnd];
          [self setRecommends: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecommendResp"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__recommends_isset) {
    if (__recommends != nil) {
      [outProtocol writeFieldBeginWithName: @"recommends" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__recommends count]];
        int i9;
        for (i9 = 0; i9 < [__recommends count]; i9++)
        {
          [[__recommends objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__recommends_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'recommends' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecommendResp("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",recommends:"];
  [ms appendFormat: @"%@", __recommends];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourcesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head name: (NSString *) name serialId: (NSString *) serialId startId: (int32_t) startId recordNum: (int32_t) recordNum resourceType: (int) resourceType
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __serialId = [serialId retain_stub];
  __serialId_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  __resourceType = resourceType;
  __resourceType_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialId"])
  {
    __serialId = [[decoder decodeObjectForKey: @"serialId"] retain_stub];
    __serialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceType"])
  {
    __resourceType = [decoder decodeIntForKey: @"resourceType"];
    __resourceType_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__serialId_isset)
  {
    [encoder encodeObject: __serialId forKey: @"serialId"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
  if (__resourceType_isset)
  {
    [encoder encodeInt: __resourceType forKey: @"resourceType"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__name release_stub];
  [__serialId release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) serialId {
  return [[__serialId retain_stub] autorelease_stub];
}

- (void) setSerialId: (NSString *) serialId {
  [serialId retain_stub];
  [__serialId release_stub];
  __serialId = serialId;
  __serialId_isset = YES;
}

- (BOOL) serialIdIsSet {
  return __serialId_isset;
}

- (void) unsetSerialId {
  [__serialId release_stub];
  __serialId = nil;
  __serialId_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (int) resourceType {
  return __resourceType;
}

- (void) setResourceType: (int) resourceType {
  __resourceType = resourceType;
  __resourceType_isset = YES;
}

- (BOOL) resourceTypeIsSet {
  return __resourceType_isset;
}

- (void) unsetResourceType {
  __resourceType_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourcesReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serialId_isset) {
    if (__serialId != nil) {
      [outProtocol writeFieldBeginWithName: @"serialId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __serialId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  if (__resourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __resourceType];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__startId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'startId' is not set."];
  }
  if (!__recordNum_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'recordNum' is not set."];
  }
  if (!__resourceType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceType' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourcesReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",serialId:"];
  [ms appendFormat: @"\"%@\"", __serialId];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @",resourceType:"];
  [ms appendFormat: @"%i", __resourceType];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head resList: (NSMutableArray *) resList resCode: (int32_t) resCode
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __resList = [resList retain_stub];
  __resList_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"resList"])
  {
    __resList = [[decoder decodeObjectForKey: @"resList"] retain_stub];
    __resList_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__resList_isset)
  {
    [encoder encodeObject: __resList forKey: @"resList"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__resList release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSMutableArray *) resList {
  return [[__resList retain_stub] autorelease_stub];
}

- (void) setResList: (NSMutableArray *) resList {
  [resList retain_stub];
  [__resList release_stub];
  __resList = resList;
  __resList_isset = YES;
}

- (BOOL) resListIsSet {
  return __resList_isset;
}

- (void) unsetResList {
  [__resList release_stub];
  __resList = nil;
  __resList_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            ResourceInfo *_elem12 = [[ResourceInfo alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release_stub];
          }
          [inProtocol readListEnd];
          [self setResList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceResp"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resList_isset) {
    if (__resList != nil) {
      [outProtocol writeFieldBeginWithName: @"resList" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__resList count]];
        int i14;
        for (i14 = 0; i14 < [__resList count]; i14++)
        {
          [[__resList objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__resList_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resList' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceResp("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",resList:"];
  [ms appendFormat: @"%@", __resList];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourcesWatched

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResourceId: (int32_t) resourceId durationTime: (int32_t) durationTime sartTime: (int32_t) sartTime
{
  self = [super init];
  __resourceId = resourceId;
  __resourceId_isset = YES;
  __durationTime = durationTime;
  __durationTime_isset = YES;
  __sartTime = sartTime;
  __sartTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"resourceId"])
  {
    __resourceId = [decoder decodeInt32ForKey: @"resourceId"];
    __resourceId_isset = YES;
  }
  if ([decoder containsValueForKey: @"durationTime"])
  {
    __durationTime = [decoder decodeInt32ForKey: @"durationTime"];
    __durationTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"sartTime"])
  {
    __sartTime = [decoder decodeInt32ForKey: @"sartTime"];
    __sartTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__resourceId_isset)
  {
    [encoder encodeInt32: __resourceId forKey: @"resourceId"];
  }
  if (__durationTime_isset)
  {
    [encoder encodeInt32: __durationTime forKey: @"durationTime"];
  }
  if (__sartTime_isset)
  {
    [encoder encodeInt32: __sartTime forKey: @"sartTime"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) resourceId {
  return __resourceId;
}

- (void) setResourceId: (int32_t) resourceId {
  __resourceId = resourceId;
  __resourceId_isset = YES;
}

- (BOOL) resourceIdIsSet {
  return __resourceId_isset;
}

- (void) unsetResourceId {
  __resourceId_isset = NO;
}

- (int32_t) durationTime {
  return __durationTime;
}

- (void) setDurationTime: (int32_t) durationTime {
  __durationTime = durationTime;
  __durationTime_isset = YES;
}

- (BOOL) durationTimeIsSet {
  return __durationTime_isset;
}

- (void) unsetDurationTime {
  __durationTime_isset = NO;
}

- (int32_t) sartTime {
  return __sartTime;
}

- (void) setSartTime: (int32_t) sartTime {
  __sartTime = sartTime;
  __sartTime_isset = YES;
}

- (BOOL) sartTimeIsSet {
  return __sartTime_isset;
}

- (void) unsetSartTime {
  __sartTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResourceId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDurationTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSartTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourcesWatched"];
  if (__resourceId_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __resourceId];
    [outProtocol writeFieldEnd];
  }
  if (__durationTime_isset) {
    [outProtocol writeFieldBeginWithName: @"durationTime" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __durationTime];
    [outProtocol writeFieldEnd];
  }
  if (__sartTime_isset) {
    [outProtocol writeFieldBeginWithName: @"sartTime" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __sartTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__resourceId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceId' is not set."];
  }
  if (!__durationTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'durationTime' is not set."];
  }
  if (!__sartTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sartTime' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourcesWatched("];
  [ms appendString: @"resourceId:"];
  [ms appendFormat: @"%i", __resourceId];
  [ms appendString: @",durationTime:"];
  [ms appendFormat: @"%i", __durationTime];
  [ms appendString: @",sartTime:"];
  [ms appendFormat: @"%i", __sartTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceSelected

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithKeyWords: (NSString *) keyWords resourceIds: (NSMutableArray *) resourceIds chooseTime: (int32_t) chooseTime
{
  self = [super init];
  __keyWords = [keyWords retain_stub];
  __keyWords_isset = YES;
  __resourceIds = [resourceIds retain_stub];
  __resourceIds_isset = YES;
  __chooseTime = chooseTime;
  __chooseTime_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"keyWords"])
  {
    __keyWords = [[decoder decodeObjectForKey: @"keyWords"] retain_stub];
    __keyWords_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceIds"])
  {
    __resourceIds = [[decoder decodeObjectForKey: @"resourceIds"] retain_stub];
    __resourceIds_isset = YES;
  }
  if ([decoder containsValueForKey: @"chooseTime"])
  {
    __chooseTime = [decoder decodeInt32ForKey: @"chooseTime"];
    __chooseTime_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__keyWords_isset)
  {
    [encoder encodeObject: __keyWords forKey: @"keyWords"];
  }
  if (__resourceIds_isset)
  {
    [encoder encodeObject: __resourceIds forKey: @"resourceIds"];
  }
  if (__chooseTime_isset)
  {
    [encoder encodeInt32: __chooseTime forKey: @"chooseTime"];
  }
}

- (void) dealloc
{
  [__keyWords release_stub];
  [__resourceIds release_stub];
  [super dealloc_stub];
}

- (NSString *) keyWords {
  return [[__keyWords retain_stub] autorelease_stub];
}

- (void) setKeyWords: (NSString *) keyWords {
  [keyWords retain_stub];
  [__keyWords release_stub];
  __keyWords = keyWords;
  __keyWords_isset = YES;
}

- (BOOL) keyWordsIsSet {
  return __keyWords_isset;
}

- (void) unsetKeyWords {
  [__keyWords release_stub];
  __keyWords = nil;
  __keyWords_isset = NO;
}

- (NSMutableArray *) resourceIds {
  return [[__resourceIds retain_stub] autorelease_stub];
}

- (void) setResourceIds: (NSMutableArray *) resourceIds {
  [resourceIds retain_stub];
  [__resourceIds release_stub];
  __resourceIds = resourceIds;
  __resourceIds_isset = YES;
}

- (BOOL) resourceIdsIsSet {
  return __resourceIds_isset;
}

- (void) unsetResourceIds {
  [__resourceIds release_stub];
  __resourceIds = nil;
  __resourceIds_isset = NO;
}

- (int32_t) chooseTime {
  return __chooseTime;
}

- (void) setChooseTime: (int32_t) chooseTime {
  __chooseTime = chooseTime;
  __chooseTime_isset = YES;
}

- (BOOL) chooseTimeIsSet {
  return __chooseTime_isset;
}

- (void) unsetChooseTime {
  __chooseTime_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setKeyWords: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            int32_t _elem17 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem17]];
          }
          [inProtocol readListEnd];
          [self setResourceIds: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setChooseTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceSelected"];
  if (__keyWords_isset) {
    if (__keyWords != nil) {
      [outProtocol writeFieldBeginWithName: @"keyWords" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __keyWords];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resourceIds_isset) {
    if (__resourceIds != nil) {
      [outProtocol writeFieldBeginWithName: @"resourceIds" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__resourceIds count]];
        int i19;
        for (i19 = 0; i19 < [__resourceIds count]; i19++)
        {
          [outProtocol writeI32: [[__resourceIds objectAtIndex: i19] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__chooseTime_isset) {
    [outProtocol writeFieldBeginWithName: @"chooseTime" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __chooseTime];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__keyWords_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'keyWords' is not set."];
  }
  if (!__resourceIds_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceIds' is not set."];
  }
  if (!__chooseTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'chooseTime' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceSelected("];
  [ms appendString: @"keyWords:"];
  [ms appendFormat: @"\"%@\"", __keyWords];
  [ms appendString: @",resourceIds:"];
  [ms appendFormat: @"%@", __resourceIds];
  [ms appendString: @",chooseTime:"];
  [ms appendFormat: @"%i", __chooseTime];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReportReqs

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head watchRecord: (NSMutableArray *) watchRecord selectRecord: (NSMutableArray *) selectRecord
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __watchRecord = [watchRecord retain_stub];
  __watchRecord_isset = YES;
  __selectRecord = [selectRecord retain_stub];
  __selectRecord_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"watchRecord"])
  {
    __watchRecord = [[decoder decodeObjectForKey: @"watchRecord"] retain_stub];
    __watchRecord_isset = YES;
  }
  if ([decoder containsValueForKey: @"selectRecord"])
  {
    __selectRecord = [[decoder decodeObjectForKey: @"selectRecord"] retain_stub];
    __selectRecord_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__watchRecord_isset)
  {
    [encoder encodeObject: __watchRecord forKey: @"watchRecord"];
  }
  if (__selectRecord_isset)
  {
    [encoder encodeObject: __selectRecord forKey: @"selectRecord"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__watchRecord release_stub];
  [__selectRecord release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSMutableArray *) watchRecord {
  return [[__watchRecord retain_stub] autorelease_stub];
}

- (void) setWatchRecord: (NSMutableArray *) watchRecord {
  [watchRecord retain_stub];
  [__watchRecord release_stub];
  __watchRecord = watchRecord;
  __watchRecord_isset = YES;
}

- (BOOL) watchRecordIsSet {
  return __watchRecord_isset;
}

- (void) unsetWatchRecord {
  [__watchRecord release_stub];
  __watchRecord = nil;
  __watchRecord_isset = NO;
}

- (NSMutableArray *) selectRecord {
  return [[__selectRecord retain_stub] autorelease_stub];
}

- (void) setSelectRecord: (NSMutableArray *) selectRecord {
  [selectRecord retain_stub];
  [__selectRecord release_stub];
  __selectRecord = selectRecord;
  __selectRecord_isset = YES;
}

- (BOOL) selectRecordIsSet {
  return __selectRecord_isset;
}

- (void) unsetSelectRecord {
  [__selectRecord release_stub];
  __selectRecord = nil;
  __selectRecord_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            ResourcesWatched *_elem22 = [[ResourcesWatched alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
            [_elem22 release_stub];
          }
          [inProtocol readListEnd];
          [self setWatchRecord: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size23;
          [inProtocol readListBeginReturningElementType: NULL size: &_size23];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size23];
          int _i24;
          for (_i24 = 0; _i24 < _size23; ++_i24)
          {
            ResourceSelected *_elem25 = [[ResourceSelected alloc] init];
            [_elem25 read: inProtocol];
            [fieldValue addObject: _elem25];
            [_elem25 release_stub];
          }
          [inProtocol readListEnd];
          [self setSelectRecord: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportReqs"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__watchRecord_isset) {
    if (__watchRecord != nil) {
      [outProtocol writeFieldBeginWithName: @"watchRecord" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__watchRecord count]];
        int i27;
        for (i27 = 0; i27 < [__watchRecord count]; i27++)
        {
          [[__watchRecord objectAtIndex: i27] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__selectRecord_isset) {
    if (__selectRecord != nil) {
      [outProtocol writeFieldBeginWithName: @"selectRecord" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__selectRecord count]];
        int i29;
        for (i29 = 0; i29 < [__selectRecord count]; i29++)
        {
          [[__selectRecord objectAtIndex: i29] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__watchRecord_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'watchRecord' is not set."];
  }
  if (!__selectRecord_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'selectRecord' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReportReqs("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",watchRecord:"];
  [ms appendFormat: @"%@", __watchRecord];
  [ms appendString: @",selectRecord:"];
  [ms appendFormat: @"%@", __selectRecord];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceIds

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResourceList: (NSMutableArray *) resourceList
{
  self = [super init];
  __resourceList = [resourceList retain_stub];
  __resourceList_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"resourceList"])
  {
    __resourceList = [[decoder decodeObjectForKey: @"resourceList"] retain_stub];
    __resourceList_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__resourceList_isset)
  {
    [encoder encodeObject: __resourceList forKey: @"resourceList"];
  }
}

- (void) dealloc
{
  [__resourceList release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) resourceList {
  return [[__resourceList retain_stub] autorelease_stub];
}

- (void) setResourceList: (NSMutableArray *) resourceList {
  [resourceList retain_stub];
  [__resourceList release_stub];
  __resourceList = resourceList;
  __resourceList_isset = YES;
}

- (BOOL) resourceListIsSet {
  return __resourceList_isset;
}

- (void) unsetResourceList {
  [__resourceList release_stub];
  __resourceList = nil;
  __resourceList_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size30;
          [inProtocol readListBeginReturningElementType: NULL size: &_size30];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size30];
          int _i31;
          for (_i31 = 0; _i31 < _size30; ++_i31)
          {
            int32_t _elem32 = [inProtocol readI32];
            [fieldValue addObject: [NSNumber numberWithLong: _elem32]];
          }
          [inProtocol readListEnd];
          [self setResourceList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceIds"];
  if (__resourceList_isset) {
    if (__resourceList != nil) {
      [outProtocol writeFieldBeginWithName: @"resourceList" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I32 size: [__resourceList count]];
        int i34;
        for (i34 = 0; i34 < [__resourceList count]; i34++)
        {
          [outProtocol writeI32: [[__resourceList objectAtIndex: i34] longValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__resourceList_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceList' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceIds("];
  [ms appendString: @"resourceList:"];
  [ms appendFormat: @"%@", __resourceList];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceInfoList

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithInfoList: (NSMutableArray *) infoList resCode: (int32_t) resCode
{
  self = [super init];
  __infoList = [infoList retain_stub];
  __infoList_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"infoList"])
  {
    __infoList = [[decoder decodeObjectForKey: @"infoList"] retain_stub];
    __infoList_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__infoList_isset)
  {
    [encoder encodeObject: __infoList forKey: @"infoList"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__infoList release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) infoList {
  return [[__infoList retain_stub] autorelease_stub];
}

- (void) setInfoList: (NSMutableArray *) infoList {
  [infoList retain_stub];
  [__infoList release_stub];
  __infoList = infoList;
  __infoList_isset = YES;
}

- (BOOL) infoListIsSet {
  return __infoList_isset;
}

- (void) unsetInfoList {
  [__infoList release_stub];
  __infoList = nil;
  __infoList_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size35;
          [inProtocol readListBeginReturningElementType: NULL size: &_size35];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size35];
          int _i36;
          for (_i36 = 0; _i36 < _size35; ++_i36)
          {
            ResourceInfo *_elem37 = [[ResourceInfo alloc] init];
            [_elem37 read: inProtocol];
            [fieldValue addObject: _elem37];
            [_elem37 release_stub];
          }
          [inProtocol readListEnd];
          [self setInfoList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceInfoList"];
  if (__infoList_isset) {
    if (__infoList != nil) {
      [outProtocol writeFieldBeginWithName: @"infoList" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__infoList count]];
        int i39;
        for (i39 = 0; i39 < [__infoList count]; i39++)
        {
          [[__infoList objectAtIndex: i39] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__infoList_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'infoList' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceInfoList("];
  [ms appendString: @"infoList:"];
  [ms appendFormat: @"%@", __infoList];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation shy_serverConstants
+ (void) initialize {
}
@end

@interface userRegister_args : NSObject <TBase, NSCoding> {
  ReqHead * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation userRegister_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (ReqHead *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (ReqHead *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"userRegister_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"userRegister_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UserRegister_result : NSObject <TBase, NSCoding> {
  RegisterResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RegisterResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (RegisterResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RegisterResp *) success;
- (void) setSuccess: (RegisterResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UserRegister_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RegisterResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RegisterResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RegisterResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RegisterResp *fieldValue = [[RegisterResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserRegister_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserRegister_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface login_args : NSObject <TBase, NSCoding> {
  LoginReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) LoginReq * req;
#endif

- (id) init;
- (id) initWithReq: (LoginReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginReq *) req;
- (void) setReq: (LoginReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (LoginReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (LoginReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (LoginReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LoginReq *fieldValue = [[LoginReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  LoginResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginResp *) success;
- (void) setSuccess: (LoginResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginResp *fieldValue = [[LoginResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <TBase, NSCoding> {
  ReqHead * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation logout_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (ReqHead *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (ReqHead *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_userRegister: (ReqHead *) req
{
  [outProtocol writeMessageBeginWithName: @"userRegister" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"userRegister_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RegisterResp *) recv_userRegister
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UserRegister_result * result = [[[UserRegister_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"userRegister failed: unknown result"];
}

- (RegisterResp *) userRegister: (ReqHead *) req
{
  [self send_userRegister : req];
  return [self recv_userRegister];
}

- (void) send_login: (LoginReq *) req
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginResp *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (LoginResp *) login: (LoginReq *) req
{
  [self send_login : req];
  return [self recv_login];
}

- (void) send_logout: (ReqHead *) req
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) logout: (ReqHead *) req
{
  [self send_logout : req];
}

@end

@implementation UserManagerProcessor

- (id) initWithUserManager: (id <UserManager>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_userRegister_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"userRegister"];
  }
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  return self;
}

- (id<UserManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_userRegister_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  userRegister_args * args = [[userRegister_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UserRegister_result * result = [[UserRegister_result alloc] init];
  [result setSuccess: [mService userRegister: [args req]]];
  [outProtocol writeMessageBeginWithName: @"userRegister"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args req]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  [mService logout: [args req]];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface search_args : NSObject <TBase, NSCoding> {
SearchReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) SearchReq * req;
#endif

- (id) init;
- (id) initWithReq: (SearchReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchReq *) req;
- (void) setReq: (SearchReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation search_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (SearchReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (SearchReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (SearchReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        SearchReq *fieldValue = [[SearchReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"search_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"search_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface Search_result : NSObject <TBase, NSCoding> {
SearchResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) SearchResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (SearchResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchResp *) success;
- (void) setSuccess: (SearchResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Search_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (SearchResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (SearchResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (SearchResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        SearchResp *fieldValue = [[SearchResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"Search_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"Search_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getRecommendResources_args : NSObject <TBase, NSCoding> {
RecommendReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) RecommendReq * req;
#endif

- (id) init;
- (id) initWithReq: (RecommendReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecommendReq *) req;
- (void) setReq: (RecommendReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getRecommendResources_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (RecommendReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (RecommendReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (RecommendReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        RecommendReq *fieldValue = [[RecommendReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getRecommendResources_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getRecommendResources_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetRecommendResources_result : NSObject <TBase, NSCoding> {
RecommendResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RecommendResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (RecommendResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecommendResp *) success;
- (void) setSuccess: (RecommendResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetRecommendResources_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (RecommendResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (RecommendResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RecommendResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        RecommendResp *fieldValue = [[RecommendResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetRecommendResources_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendResources_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getResources_args : NSObject <TBase, NSCoding> {
ResourcesReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ResourcesReq * req;
#endif

- (id) init;
- (id) initWithReq: (ResourcesReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourcesReq *) req;
- (void) setReq: (ResourcesReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getResources_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ResourcesReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ResourcesReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ResourcesReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        ResourcesReq *fieldValue = [[ResourcesReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getResources_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getResources_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetResources_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetResources_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetResources_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetResources_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ResourceManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_search: (SearchReq *) req
{
[outProtocol writeMessageBeginWithName: @"search" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"search_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (SearchResp *) recv_search
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
Search_result * result = [[[Search_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"search failed: unknown result"];
}

- (SearchResp *) search: (SearchReq *) req
{
[self send_search : req];
return [self recv_search];
}

- (void) send_getRecommendResources: (RecommendReq *) req
{
[outProtocol writeMessageBeginWithName: @"getRecommendResources" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getRecommendResources_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (RecommendResp *) recv_getRecommendResources
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetRecommendResources_result * result = [[[GetRecommendResources_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getRecommendResources failed: unknown result"];
}

- (RecommendResp *) getRecommendResources: (RecommendReq *) req
{
[self send_getRecommendResources : req];
return [self recv_getRecommendResources];
}

- (void) send_getResources: (ResourcesReq *) req
{
[outProtocol writeMessageBeginWithName: @"getResources" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getResources_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_getResources
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetResources_result * result = [[[GetResources_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getResources failed: unknown result"];
}

- (ResourceResp *) getResources: (ResourcesReq *) req
{
[self send_getResources : req];
return [self recv_getResources];
}

@end

@implementation ResourceManagerProcessor

- (id) initWithResourceManager: (id <ResourceManager>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_search_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"search"];
}
{
  SEL s = @selector(process_getRecommendResources_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getRecommendResources"];
}
{
  SEL s = @selector(process_getResources_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getResources"];
}
return self;
}

- (id<ResourceManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_search_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
search_args * args = [[search_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Search_result * result = [[Search_result alloc] init];
[result setSuccess: [mService search: [args req]]];
[outProtocol writeMessageBeginWithName: @"search"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getRecommendResources_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getRecommendResources_args * args = [[getRecommendResources_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetRecommendResources_result * result = [[GetRecommendResources_result alloc] init];
[result setSuccess: [mService getRecommendResources: [args req]]];
[outProtocol writeMessageBeginWithName: @"getRecommendResources"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getResources_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getResources_args * args = [[getResources_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetResources_result * result = [[GetResources_result alloc] init];
[result setSuccess: [mService getResources: [args req]]];
[outProtocol writeMessageBeginWithName: @"getResources"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface tell_args : NSObject <TBase, NSCoding> {
ReportReqs * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReportReqs * req;
#endif

- (id) init;
- (id) initWithReq: (ReportReqs *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReportReqs *) req;
- (void) setReq: (ReportReqs *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation tell_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ReportReqs *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
__req = [[decoder decodeObjectForKey: @"req"] retain_stub];
__req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
[encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ReportReqs *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReportReqs *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRUCT) {
      ReportReqs *fieldValue = [[ReportReqs alloc] init];
      [fieldValue read: inProtocol];
      [self setReq: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"tell_args"];
if (__req_isset) {
if (__req != nil) {
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [__req write: outProtocol];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"tell_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ReportManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_tell: (ReportReqs *) req
{
[outProtocol writeMessageBeginWithName: @"tell" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"tell_args"];
if (req != nil){
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[req write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) tell: (ReportReqs *) req
{
[self send_tell : req];
}

@end

@implementation ReportManagerProcessor

- (id) initWithReportManager: (id <ReportManager>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_tell_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"tell"];
}
return self;
}

- (id<ReportManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_tell_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
tell_args * args = [[tell_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService tell: [args req]];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface recommendAdd_args : NSObject <TBase, NSCoding> {
ResourceIds * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ResourceIds * req;
#endif

- (id) init;
- (id) initWithReq: (ResourceIds *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceIds *) req;
- (void) setReq: (ResourceIds *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation recommendAdd_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ResourceIds *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
__req = [[decoder decodeObjectForKey: @"req"] retain_stub];
__req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
[encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ResourceIds *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ResourceIds *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRUCT) {
    ResourceIds *fieldValue = [[ResourceIds alloc] init];
    [fieldValue read: inProtocol];
    [self setReq: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"recommendAdd_args"];
if (__req_isset) {
if (__req != nil) {
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[__req write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"recommendAdd_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface RecommendAdd_result : NSObject <TBase, NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation RecommendAdd_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeInt32ForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_I32) {
    int32_t fieldValue = [inProtocol readI32];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"RecommendAdd_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
[outProtocol writeI32: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"RecommendAdd_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface recommendDel_args : NSObject <TBase, NSCoding> {
ResourceIds * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ResourceIds * req;
#endif

- (id) init;
- (id) initWithReq: (ResourceIds *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceIds *) req;
- (void) setReq: (ResourceIds *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation recommendDel_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ResourceIds *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
__req = [[decoder decodeObjectForKey: @"req"] retain_stub];
__req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
[encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ResourceIds *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ResourceIds *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRUCT) {
    ResourceIds *fieldValue = [[ResourceIds alloc] init];
    [fieldValue read: inProtocol];
    [self setReq: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"recommendDel_args"];
if (__req_isset) {
if (__req != nil) {
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[__req write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"recommendDel_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface RecommendDel_result : NSObject <TBase, NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation RecommendDel_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeInt32ForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_I32) {
    int32_t fieldValue = [inProtocol readI32];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"RecommendDel_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
[outProtocol writeI32: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"RecommendDel_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface recommendModify_args : NSObject <TBase, NSCoding> {
ResourceInfoList * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ResourceInfoList * req;
#endif

- (id) init;
- (id) initWithReq: (ResourceInfoList *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceInfoList *) req;
- (void) setReq: (ResourceInfoList *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation recommendModify_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ResourceInfoList *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
__req = [[decoder decodeObjectForKey: @"req"] retain_stub];
__req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
[encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ResourceInfoList *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ResourceInfoList *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRUCT) {
    ResourceInfoList *fieldValue = [[ResourceInfoList alloc] init];
    [fieldValue read: inProtocol];
    [self setReq: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"recommendModify_args"];
if (__req_isset) {
if (__req != nil) {
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[__req write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"recommendModify_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface RecommendModify_result : NSObject <TBase, NSCoding> {
int32_t __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation RecommendModify_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (int32_t) success
{
self = [super init];
__success = success;
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [decoder decodeInt32ForKey: @"success"];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeInt32: __success forKey: @"success"];
}
}

- (void) dealloc
{
[super dealloc_stub];
}

- (int32_t) success {
return __success;
}

- (void) setSuccess: (int32_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_I32) {
    int32_t fieldValue = [inProtocol readI32];
    [self setSuccess: fieldValue];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"RecommendModify_result"];

if (__success_isset) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
[outProtocol writeI32: __success];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"RecommendModify_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getByids_args : NSObject <TBase, NSCoding> {
ResourceIds * __ids;

BOOL __ids_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=ids, setter=setIds:) ResourceIds * ids;
#endif

- (id) init;
- (id) initWithIds: (ResourceIds *) ids;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceIds *) ids;
- (void) setIds: (ResourceIds *) ids;
#endif
- (BOOL) idsIsSet;

@end

@implementation getByids_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithIds: (ResourceIds *) ids
{
self = [super init];
__ids = [ids retain_stub];
__ids_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"ids"])
{
__ids = [[decoder decodeObjectForKey: @"ids"] retain_stub];
__ids_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__ids_isset)
{
[encoder encodeObject: __ids forKey: @"ids"];
}
}

- (void) dealloc
{
[__ids release_stub];
[super dealloc_stub];
}

- (ResourceIds *) ids {
return [[__ids retain_stub] autorelease_stub];
}

- (void) setIds: (ResourceIds *) ids {
[ids retain_stub];
[__ids release_stub];
__ids = ids;
__ids_isset = YES;
}

- (BOOL) idsIsSet {
return __ids_isset;
}

- (void) unsetIds {
[__ids release_stub];
__ids = nil;
__ids_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 1:
  if (fieldType == TType_STRUCT) {
    ResourceIds *fieldValue = [[ResourceIds alloc] init];
    [fieldValue read: inProtocol];
    [self setIds: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getByids_args"];
if (__ids_isset) {
if (__ids != nil) {
[outProtocol writeFieldBeginWithName: @"ids" type: TType_STRUCT fieldID: 1];
[__ids write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getByids_args("];
[ms appendString: @"ids:"];
[ms appendFormat: @"%@", __ids];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetByids_result : NSObject <TBase, NSCoding> {
ResourceInfoList * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceInfoList * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceInfoList *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceInfoList *) success;
- (void) setSuccess: (ResourceInfoList *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetByids_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceInfoList *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
__success = [[decoder decodeObjectForKey: @"success"] retain_stub];
__success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
[encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceInfoList *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceInfoList *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
break;
}
switch (fieldID)
{
case 0:
  if (fieldType == TType_STRUCT) {
    ResourceInfoList *fieldValue = [[ResourceInfoList alloc] init];
    [fieldValue read: inProtocol];
    [self setSuccess: fieldValue];
    [fieldValue release_stub];
  } else { 
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  }
  break;
default:
  [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
  break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetByids_result"];

if (__success_isset) {
if (__success != nil) {
[outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
[__success write: outProtocol];
[outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetByids_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation RecommendManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_recommendAdd: (ResourceIds *) req
{
[outProtocol writeMessageBeginWithName: @"recommendAdd" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"recommendAdd_args"];
if (req != nil){
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[req write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_recommendAdd
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
RecommendAdd_result * result = [[[RecommendAdd_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"recommendAdd failed: unknown result"];
}

- (int32_t) recommendAdd: (ResourceIds *) req
{
[self send_recommendAdd : req];
return [self recv_recommendAdd];
}

- (void) send_recommendDel: (ResourceIds *) req
{
[outProtocol writeMessageBeginWithName: @"recommendDel" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"recommendDel_args"];
if (req != nil){
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[req write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_recommendDel
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
RecommendDel_result * result = [[[RecommendDel_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"recommendDel failed: unknown result"];
}

- (int32_t) recommendDel: (ResourceIds *) req
{
[self send_recommendDel : req];
return [self recv_recommendDel];
}

- (void) send_recommendModify: (ResourceInfoList *) req
{
[outProtocol writeMessageBeginWithName: @"recommendModify" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"recommendModify_args"];
if (req != nil){
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[req write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int32_t) recv_recommendModify
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
RecommendModify_result * result = [[[RecommendModify_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"recommendModify failed: unknown result"];
}

- (int32_t) recommendModify: (ResourceInfoList *) req
{
[self send_recommendModify : req];
return [self recv_recommendModify];
}

- (void) send_getByids: (ResourceIds *) ids
{
[outProtocol writeMessageBeginWithName: @"getByids" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getByids_args"];
if (ids != nil){
[outProtocol writeFieldBeginWithName: @"ids" type: TType_STRUCT fieldID: 1];
[ids write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceInfoList *) recv_getByids
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetByids_result * result = [[[GetByids_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getByids failed: unknown result"];
}

- (ResourceInfoList *) getByids: (ResourceIds *) ids
{
[self send_getByids : ids];
return [self recv_getByids];
}

@end

@implementation RecommendManagerProcessor

- (id) initWithRecommendManager: (id <RecommendManager>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_recommendAdd_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"recommendAdd"];
}
{
SEL s = @selector(process_recommendDel_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"recommendDel"];
}
{
SEL s = @selector(process_recommendModify_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"recommendModify"];
}
{
SEL s = @selector(process_getByids_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"getByids"];
}
return self;
}

- (id<RecommendManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_recommendAdd_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
recommendAdd_args * args = [[recommendAdd_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RecommendAdd_result * result = [[RecommendAdd_result alloc] init];
[result setSuccess: [mService recommendAdd: [args req]]];
[outProtocol writeMessageBeginWithName: @"recommendAdd"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_recommendDel_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
recommendDel_args * args = [[recommendDel_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RecommendDel_result * result = [[RecommendDel_result alloc] init];
[result setSuccess: [mService recommendDel: [args req]]];
[outProtocol writeMessageBeginWithName: @"recommendDel"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_recommendModify_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
recommendModify_args * args = [[recommendModify_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
RecommendModify_result * result = [[RecommendModify_result alloc] init];
[result setSuccess: [mService recommendModify: [args req]]];
[outProtocol writeMessageBeginWithName: @"recommendModify"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getByids_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getByids_args * args = [[getByids_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetByids_result * result = [[GetByids_result alloc] init];
[result setSuccess: [mService getByids: [args ids]]];
[outProtocol writeMessageBeginWithName: @"getByids"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

