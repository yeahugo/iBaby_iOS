/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "shy.h"

@implementation ReqHead

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBabyId: (int32_t) babyId guid: (NSString *) guid version: (NSString *) version
{
  self = [super init];
  __babyId = babyId;
  __babyId_isset = YES;
  __guid = [guid retain_stub];
  __guid_isset = YES;
  __version = [version retain_stub];
  __version_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"babyId"])
  {
    __babyId = [decoder decodeInt32ForKey: @"babyId"];
    __babyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"guid"])
  {
    __guid = [[decoder decodeObjectForKey: @"guid"] retain_stub];
    __guid_isset = YES;
  }
  if ([decoder containsValueForKey: @"version"])
  {
    __version = [[decoder decodeObjectForKey: @"version"] retain_stub];
    __version_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__babyId_isset)
  {
    [encoder encodeInt32: __babyId forKey: @"babyId"];
  }
  if (__guid_isset)
  {
    [encoder encodeObject: __guid forKey: @"guid"];
  }
  if (__version_isset)
  {
    [encoder encodeObject: __version forKey: @"version"];
  }
}

- (void) dealloc
{
  [__guid release_stub];
  [__version release_stub];
  [super dealloc_stub];
}

- (int32_t) babyId {
  return __babyId;
}

- (void) setBabyId: (int32_t) babyId {
  __babyId = babyId;
  __babyId_isset = YES;
}

- (BOOL) babyIdIsSet {
  return __babyId_isset;
}

- (void) unsetBabyId {
  __babyId_isset = NO;
}

- (NSString *) guid {
  return [[__guid retain_stub] autorelease_stub];
}

- (void) setGuid: (NSString *) guid {
  [guid retain_stub];
  [__guid release_stub];
  __guid = guid;
  __guid_isset = YES;
}

- (BOOL) guidIsSet {
  return __guid_isset;
}

- (void) unsetGuid {
  [__guid release_stub];
  __guid = nil;
  __guid_isset = NO;
}

- (NSString *) version {
  return [[__version retain_stub] autorelease_stub];
}

- (void) setVersion: (NSString *) version {
  [version retain_stub];
  [__version release_stub];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release_stub];
  __version = nil;
  __version_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBabyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGuid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReqHead"];
  if (__babyId_isset) {
    [outProtocol writeFieldBeginWithName: @"babyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __babyId];
    [outProtocol writeFieldEnd];
  }
  if (__guid_isset) {
    if (__guid != nil) {
      [outProtocol writeFieldBeginWithName: @"guid" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __guid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__babyId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'babyId' is not set."];
  }
  if (!__guid_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'guid' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReqHead("];
  [ms appendString: @"babyId:"];
  [ms appendFormat: @"%i", __babyId];
  [ms appendString: @",guid:"];
  [ms appendFormat: @"\"%@\"", __guid];
  [ms appendString: @",version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegisterResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithBabyId: (int32_t) babyId pwd: (NSString *) pwd resCode: (int32_t) resCode
{
  self = [super init];
  __babyId = babyId;
  __babyId_isset = YES;
  __pwd = [pwd retain_stub];
  __pwd_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"babyId"])
  {
    __babyId = [decoder decodeInt32ForKey: @"babyId"];
    __babyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"pwd"])
  {
    __pwd = [[decoder decodeObjectForKey: @"pwd"] retain_stub];
    __pwd_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__babyId_isset)
  {
    [encoder encodeInt32: __babyId forKey: @"babyId"];
  }
  if (__pwd_isset)
  {
    [encoder encodeObject: __pwd forKey: @"pwd"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__pwd release_stub];
  [super dealloc_stub];
}

- (int32_t) babyId {
  return __babyId;
}

- (void) setBabyId: (int32_t) babyId {
  __babyId = babyId;
  __babyId_isset = YES;
}

- (BOOL) babyIdIsSet {
  return __babyId_isset;
}

- (void) unsetBabyId {
  __babyId_isset = NO;
}

- (NSString *) pwd {
  return [[__pwd retain_stub] autorelease_stub];
}

- (void) setPwd: (NSString *) pwd {
  [pwd retain_stub];
  [__pwd release_stub];
  __pwd = pwd;
  __pwd_isset = YES;
}

- (BOOL) pwdIsSet {
  return __pwd_isset;
}

- (void) unsetPwd {
  [__pwd release_stub];
  __pwd = nil;
  __pwd_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setBabyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPwd: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegisterResp"];
  if (__babyId_isset) {
    [outProtocol writeFieldBeginWithName: @"babyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __babyId];
    [outProtocol writeFieldEnd];
  }
  if (__pwd_isset) {
    if (__pwd != nil) {
      [outProtocol writeFieldBeginWithName: @"pwd" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __pwd];
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__babyId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'babyId' is not set."];
  }
  if (!__pwd_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'pwd' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegisterResp("];
  [ms appendString: @"babyId:"];
  [ms appendFormat: @"%i", __babyId];
  [ms appendString: @",pwd:"];
  [ms appendFormat: @"\"%@\"", __pwd];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head authStr: (NSString *) authStr
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __authStr = [authStr retain_stub];
  __authStr_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"authStr"])
  {
    __authStr = [[decoder decodeObjectForKey: @"authStr"] retain_stub];
    __authStr_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__authStr_isset)
  {
    [encoder encodeObject: __authStr forKey: @"authStr"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__authStr release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) authStr {
  return [[__authStr retain_stub] autorelease_stub];
}

- (void) setAuthStr: (NSString *) authStr {
  [authStr retain_stub];
  [__authStr release_stub];
  __authStr = authStr;
  __authStr_isset = YES;
}

- (BOOL) authStrIsSet {
  return __authStr_isset;
}

- (void) unsetAuthStr {
  [__authStr release_stub];
  __authStr = nil;
  __authStr_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAuthStr: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__authStr_isset) {
    if (__authStr != nil) {
      [outProtocol writeFieldBeginWithName: @"authStr" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __authStr];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__authStr_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'authStr' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",authStr:"];
  [ms appendFormat: @"\"%@\"", __authStr];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserConfig

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head appKey56: (NSString *) appKey56 reportFlag: (int32_t) reportFlag
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __appKey56 = [appKey56 retain_stub];
  __appKey56_isset = YES;
  __reportFlag = reportFlag;
  __reportFlag_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"appKey56"])
  {
    __appKey56 = [[decoder decodeObjectForKey: @"appKey56"] retain_stub];
    __appKey56_isset = YES;
  }
  if ([decoder containsValueForKey: @"reportFlag"])
  {
    __reportFlag = [decoder decodeInt32ForKey: @"reportFlag"];
    __reportFlag_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__appKey56_isset)
  {
    [encoder encodeObject: __appKey56 forKey: @"appKey56"];
  }
  if (__reportFlag_isset)
  {
    [encoder encodeInt32: __reportFlag forKey: @"reportFlag"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__appKey56 release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) appKey56 {
  return [[__appKey56 retain_stub] autorelease_stub];
}

- (void) setAppKey56: (NSString *) appKey56 {
  [appKey56 retain_stub];
  [__appKey56 release_stub];
  __appKey56 = appKey56;
  __appKey56_isset = YES;
}

- (BOOL) appKey56IsSet {
  return __appKey56_isset;
}

- (void) unsetAppKey56 {
  [__appKey56 release_stub];
  __appKey56 = nil;
  __appKey56_isset = NO;
}

- (int32_t) reportFlag {
  return __reportFlag;
}

- (void) setReportFlag: (int32_t) reportFlag {
  __reportFlag = reportFlag;
  __reportFlag_isset = YES;
}

- (BOOL) reportFlagIsSet {
  return __reportFlag_isset;
}

- (void) unsetReportFlag {
  __reportFlag_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAppKey56: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setReportFlag: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserConfig"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__appKey56_isset) {
    if (__appKey56 != nil) {
      [outProtocol writeFieldBeginWithName: @"appKey56" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __appKey56];
      [outProtocol writeFieldEnd];
    }
  }
  if (__reportFlag_isset) {
    [outProtocol writeFieldBeginWithName: @"reportFlag" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __reportFlag];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__appKey56_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'appKey56' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserConfig("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",appKey56:"];
  [ms appendFormat: @"\"%@\"", __appKey56];
  [ms appendString: @",reportFlag:"];
  [ms appendFormat: @"%i", __reportFlag];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceInfo

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithShyId: (int32_t) shyId url: (NSString *) url img: (NSString *) img title: (NSString *) title sourceType: (int) sourceType resourceType: (int) resourceType durationTime: (int32_t) durationTime status: (int) status curSection: (int32_t) curSection sectionNum: (int32_t) sectionNum serialId: (NSString *) serialId vid: (NSString *) vid serialDes: (NSString *) serialDes serialName: (NSString *) serialName
{
  self = [super init];
  __shyId = shyId;
  __shyId_isset = YES;
  __url = [url retain_stub];
  __url_isset = YES;
  __img = [img retain_stub];
  __img_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __sourceType = sourceType;
  __sourceType_isset = YES;
  __resourceType = resourceType;
  __resourceType_isset = YES;
  __durationTime = durationTime;
  __durationTime_isset = YES;
  __status = status;
  __status_isset = YES;
  __curSection = curSection;
  __curSection_isset = YES;
  __sectionNum = sectionNum;
  __sectionNum_isset = YES;
  __serialId = [serialId retain_stub];
  __serialId_isset = YES;
  __vid = [vid retain_stub];
  __vid_isset = YES;
  __serialDes = [serialDes retain_stub];
  __serialDes_isset = YES;
  __serialName = [serialName retain_stub];
  __serialName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"shyId"])
  {
    __shyId = [decoder decodeInt32ForKey: @"shyId"];
    __shyId_isset = YES;
  }
  if ([decoder containsValueForKey: @"url"])
  {
    __url = [[decoder decodeObjectForKey: @"url"] retain_stub];
    __url_isset = YES;
  }
  if ([decoder containsValueForKey: @"img"])
  {
    __img = [[decoder decodeObjectForKey: @"img"] retain_stub];
    __img_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceType"])
  {
    __sourceType = [decoder decodeIntForKey: @"sourceType"];
    __sourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceType"])
  {
    __resourceType = [decoder decodeIntForKey: @"resourceType"];
    __resourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"durationTime"])
  {
    __durationTime = [decoder decodeInt32ForKey: @"durationTime"];
    __durationTime_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  if ([decoder containsValueForKey: @"curSection"])
  {
    __curSection = [decoder decodeInt32ForKey: @"curSection"];
    __curSection_isset = YES;
  }
  if ([decoder containsValueForKey: @"sectionNum"])
  {
    __sectionNum = [decoder decodeInt32ForKey: @"sectionNum"];
    __sectionNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialId"])
  {
    __serialId = [[decoder decodeObjectForKey: @"serialId"] retain_stub];
    __serialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"vid"])
  {
    __vid = [[decoder decodeObjectForKey: @"vid"] retain_stub];
    __vid_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialDes"])
  {
    __serialDes = [[decoder decodeObjectForKey: @"serialDes"] retain_stub];
    __serialDes_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialName"])
  {
    __serialName = [[decoder decodeObjectForKey: @"serialName"] retain_stub];
    __serialName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__shyId_isset)
  {
    [encoder encodeInt32: __shyId forKey: @"shyId"];
  }
  if (__url_isset)
  {
    [encoder encodeObject: __url forKey: @"url"];
  }
  if (__img_isset)
  {
    [encoder encodeObject: __img forKey: @"img"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__sourceType_isset)
  {
    [encoder encodeInt: __sourceType forKey: @"sourceType"];
  }
  if (__resourceType_isset)
  {
    [encoder encodeInt: __resourceType forKey: @"resourceType"];
  }
  if (__durationTime_isset)
  {
    [encoder encodeInt32: __durationTime forKey: @"durationTime"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
  if (__curSection_isset)
  {
    [encoder encodeInt32: __curSection forKey: @"curSection"];
  }
  if (__sectionNum_isset)
  {
    [encoder encodeInt32: __sectionNum forKey: @"sectionNum"];
  }
  if (__serialId_isset)
  {
    [encoder encodeObject: __serialId forKey: @"serialId"];
  }
  if (__vid_isset)
  {
    [encoder encodeObject: __vid forKey: @"vid"];
  }
  if (__serialDes_isset)
  {
    [encoder encodeObject: __serialDes forKey: @"serialDes"];
  }
  if (__serialName_isset)
  {
    [encoder encodeObject: __serialName forKey: @"serialName"];
  }
}

- (void) dealloc
{
  [__url release_stub];
  [__img release_stub];
  [__title release_stub];
  [__serialId release_stub];
  [__vid release_stub];
  [__serialDes release_stub];
  [__serialName release_stub];
  [super dealloc_stub];
}

- (int32_t) shyId {
  return __shyId;
}

- (void) setShyId: (int32_t) shyId {
  __shyId = shyId;
  __shyId_isset = YES;
}

- (BOOL) shyIdIsSet {
  return __shyId_isset;
}

- (void) unsetShyId {
  __shyId_isset = NO;
}

- (NSString *) url {
  return [[__url retain_stub] autorelease_stub];
}

- (void) setUrl: (NSString *) url {
  [url retain_stub];
  [__url release_stub];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release_stub];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) img {
  return [[__img retain_stub] autorelease_stub];
}

- (void) setImg: (NSString *) img {
  [img retain_stub];
  [__img release_stub];
  __img = img;
  __img_isset = YES;
}

- (BOOL) imgIsSet {
  return __img_isset;
}

- (void) unsetImg {
  [__img release_stub];
  __img = nil;
  __img_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (int) sourceType {
  return __sourceType;
}

- (void) setSourceType: (int) sourceType {
  __sourceType = sourceType;
  __sourceType_isset = YES;
}

- (BOOL) sourceTypeIsSet {
  return __sourceType_isset;
}

- (void) unsetSourceType {
  __sourceType_isset = NO;
}

- (int) resourceType {
  return __resourceType;
}

- (void) setResourceType: (int) resourceType {
  __resourceType = resourceType;
  __resourceType_isset = YES;
}

- (BOOL) resourceTypeIsSet {
  return __resourceType_isset;
}

- (void) unsetResourceType {
  __resourceType_isset = NO;
}

- (int32_t) durationTime {
  return __durationTime;
}

- (void) setDurationTime: (int32_t) durationTime {
  __durationTime = durationTime;
  __durationTime_isset = YES;
}

- (BOOL) durationTimeIsSet {
  return __durationTime_isset;
}

- (void) unsetDurationTime {
  __durationTime_isset = NO;
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (int32_t) curSection {
  return __curSection;
}

- (void) setCurSection: (int32_t) curSection {
  __curSection = curSection;
  __curSection_isset = YES;
}

- (BOOL) curSectionIsSet {
  return __curSection_isset;
}

- (void) unsetCurSection {
  __curSection_isset = NO;
}

- (int32_t) sectionNum {
  return __sectionNum;
}

- (void) setSectionNum: (int32_t) sectionNum {
  __sectionNum = sectionNum;
  __sectionNum_isset = YES;
}

- (BOOL) sectionNumIsSet {
  return __sectionNum_isset;
}

- (void) unsetSectionNum {
  __sectionNum_isset = NO;
}

- (NSString *) serialId {
  return [[__serialId retain_stub] autorelease_stub];
}

- (void) setSerialId: (NSString *) serialId {
  [serialId retain_stub];
  [__serialId release_stub];
  __serialId = serialId;
  __serialId_isset = YES;
}

- (BOOL) serialIdIsSet {
  return __serialId_isset;
}

- (void) unsetSerialId {
  [__serialId release_stub];
  __serialId = nil;
  __serialId_isset = NO;
}

- (NSString *) vid {
  return [[__vid retain_stub] autorelease_stub];
}

- (void) setVid: (NSString *) vid {
  [vid retain_stub];
  [__vid release_stub];
  __vid = vid;
  __vid_isset = YES;
}

- (BOOL) vidIsSet {
  return __vid_isset;
}

- (void) unsetVid {
  [__vid release_stub];
  __vid = nil;
  __vid_isset = NO;
}

- (NSString *) serialDes {
  return [[__serialDes retain_stub] autorelease_stub];
}

- (void) setSerialDes: (NSString *) serialDes {
  [serialDes retain_stub];
  [__serialDes release_stub];
  __serialDes = serialDes;
  __serialDes_isset = YES;
}

- (BOOL) serialDesIsSet {
  return __serialDes_isset;
}

- (void) unsetSerialDes {
  [__serialDes release_stub];
  __serialDes = nil;
  __serialDes_isset = NO;
}

- (NSString *) serialName {
  return [[__serialName retain_stub] autorelease_stub];
}

- (void) setSerialName: (NSString *) serialName {
  [serialName retain_stub];
  [__serialName release_stub];
  __serialName = serialName;
  __serialName_isset = YES;
}

- (BOOL) serialNameIsSet {
  return __serialName_isset;
}

- (void) unsetSerialName {
  [__serialName release_stub];
  __serialName = nil;
  __serialName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setShyId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setImg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDurationTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCurSection: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSectionNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialDes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceInfo"];
  if (__shyId_isset) {
    [outProtocol writeFieldBeginWithName: @"shyId" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __shyId];
    [outProtocol writeFieldEnd];
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__img_isset) {
    if (__img != nil) {
      [outProtocol writeFieldBeginWithName: @"img" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __img];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"sourceType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __sourceType];
    [outProtocol writeFieldEnd];
  }
  if (__resourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __resourceType];
    [outProtocol writeFieldEnd];
  }
  if (__durationTime_isset) {
    [outProtocol writeFieldBeginWithName: @"durationTime" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __durationTime];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  if (__curSection_isset) {
    [outProtocol writeFieldBeginWithName: @"curSection" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __curSection];
    [outProtocol writeFieldEnd];
  }
  if (__sectionNum_isset) {
    [outProtocol writeFieldBeginWithName: @"sectionNum" type: TType_I32 fieldID: 10];
    [outProtocol writeI32: __sectionNum];
    [outProtocol writeFieldEnd];
  }
  if (__serialId_isset) {
    if (__serialId != nil) {
      [outProtocol writeFieldBeginWithName: @"serialId" type: TType_STRING fieldID: 11];
      [outProtocol writeString: __serialId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__vid_isset) {
    if (__vid != nil) {
      [outProtocol writeFieldBeginWithName: @"vid" type: TType_STRING fieldID: 12];
      [outProtocol writeString: __vid];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serialDes_isset) {
    if (__serialDes != nil) {
      [outProtocol writeFieldBeginWithName: @"serialDes" type: TType_STRING fieldID: 13];
      [outProtocol writeString: __serialDes];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serialName_isset) {
    if (__serialName != nil) {
      [outProtocol writeFieldBeginWithName: @"serialName" type: TType_STRING fieldID: 14];
      [outProtocol writeString: __serialName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__shyId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'shyId' is not set."];
  }
  if (!__url_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'url' is not set."];
  }
  if (!__img_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'img' is not set."];
  }
  if (!__title_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'title' is not set."];
  }
  if (!__sourceType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sourceType' is not set."];
  }
  if (!__resourceType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resourceType' is not set."];
  }
  if (!__durationTime_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'durationTime' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceInfo("];
  [ms appendString: @"shyId:"];
  [ms appendFormat: @"%i", __shyId];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",img:"];
  [ms appendFormat: @"\"%@\"", __img];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",sourceType:"];
  [ms appendFormat: @"%i", __sourceType];
  [ms appendString: @",resourceType:"];
  [ms appendFormat: @"%i", __resourceType];
  [ms appendString: @",durationTime:"];
  [ms appendFormat: @"%i", __durationTime];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @",curSection:"];
  [ms appendFormat: @"%i", __curSection];
  [ms appendString: @",sectionNum:"];
  [ms appendFormat: @"%i", __sectionNum];
  [ms appendString: @",serialId:"];
  [ms appendFormat: @"\"%@\"", __serialId];
  [ms appendString: @",vid:"];
  [ms appendFormat: @"\"%@\"", __vid];
  [ms appendString: @",serialDes:"];
  [ms appendFormat: @"\"%@\"", __serialDes];
  [ms appendString: @",serialName:"];
  [ms appendFormat: @"\"%@\"", __serialName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourceResp

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithResList: (NSMutableArray *) resList resCode: (int32_t) resCode
{
  self = [super init];
  __resList = [resList retain_stub];
  __resList_isset = YES;
  __resCode = resCode;
  __resCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"resList"])
  {
    __resList = [[decoder decodeObjectForKey: @"resList"] retain_stub];
    __resList_isset = YES;
  }
  if ([decoder containsValueForKey: @"resCode"])
  {
    __resCode = [decoder decodeInt32ForKey: @"resCode"];
    __resCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__resList_isset)
  {
    [encoder encodeObject: __resList forKey: @"resList"];
  }
  if (__resCode_isset)
  {
    [encoder encodeInt32: __resCode forKey: @"resCode"];
  }
}

- (void) dealloc
{
  [__resList release_stub];
  [super dealloc_stub];
}

- (NSMutableArray *) resList {
  return [[__resList retain_stub] autorelease_stub];
}

- (void) setResList: (NSMutableArray *) resList {
  [resList retain_stub];
  [__resList release_stub];
  __resList = resList;
  __resList_isset = YES;
}

- (BOOL) resListIsSet {
  return __resList_isset;
}

- (void) unsetResList {
  [__resList release_stub];
  __resList = nil;
  __resList_isset = NO;
}

- (int32_t) resCode {
  return __resCode;
}

- (void) setResCode: (int32_t) resCode {
  __resCode = resCode;
  __resCode_isset = YES;
}

- (BOOL) resCodeIsSet {
  return __resCode_isset;
}

- (void) unsetResCode {
  __resCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            ResourceInfo *_elem2 = [[ResourceInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release_stub];
          }
          [inProtocol readListEnd];
          [self setResList: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setResCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourceResp"];
  if (__resList_isset) {
    if (__resList != nil) {
      [outProtocol writeFieldBeginWithName: @"resList" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__resList count]];
        int i4;
        for (i4 = 0; i4 < [__resList count]; i4++)
        {
          [[__resList objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__resCode_isset) {
    [outProtocol writeFieldBeginWithName: @"resCode" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __resCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__resList_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resList' is not set."];
  }
  if (!__resCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'resCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourceResp("];
  [ms appendString: @"resList:"];
  [ms appendFormat: @"%@", __resList];
  [ms appendString: @",resCode:"];
  [ms appendFormat: @"%i", __resCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SearchReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head searchKeys: (NSString *) searchKeys startId: (int32_t) startId recordNum: (int32_t) recordNum resourceType: (int) resourceType serialId: (NSString *) serialId
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __searchKeys = [searchKeys retain_stub];
  __searchKeys_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  __resourceType = resourceType;
  __resourceType_isset = YES;
  __serialId = [serialId retain_stub];
  __serialId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"searchKeys"])
  {
    __searchKeys = [[decoder decodeObjectForKey: @"searchKeys"] retain_stub];
    __searchKeys_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceType"])
  {
    __resourceType = [decoder decodeIntForKey: @"resourceType"];
    __resourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialId"])
  {
    __serialId = [[decoder decodeObjectForKey: @"serialId"] retain_stub];
    __serialId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__searchKeys_isset)
  {
    [encoder encodeObject: __searchKeys forKey: @"searchKeys"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
  if (__resourceType_isset)
  {
    [encoder encodeInt: __resourceType forKey: @"resourceType"];
  }
  if (__serialId_isset)
  {
    [encoder encodeObject: __serialId forKey: @"serialId"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__searchKeys release_stub];
  [__serialId release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) searchKeys {
  return [[__searchKeys retain_stub] autorelease_stub];
}

- (void) setSearchKeys: (NSString *) searchKeys {
  [searchKeys retain_stub];
  [__searchKeys release_stub];
  __searchKeys = searchKeys;
  __searchKeys_isset = YES;
}

- (BOOL) searchKeysIsSet {
  return __searchKeys_isset;
}

- (void) unsetSearchKeys {
  [__searchKeys release_stub];
  __searchKeys = nil;
  __searchKeys_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (int) resourceType {
  return __resourceType;
}

- (void) setResourceType: (int) resourceType {
  __resourceType = resourceType;
  __resourceType_isset = YES;
}

- (BOOL) resourceTypeIsSet {
  return __resourceType_isset;
}

- (void) unsetResourceType {
  __resourceType_isset = NO;
}

- (NSString *) serialId {
  return [[__serialId retain_stub] autorelease_stub];
}

- (void) setSerialId: (NSString *) serialId {
  [serialId retain_stub];
  [__serialId release_stub];
  __serialId = serialId;
  __serialId_isset = YES;
}

- (BOOL) serialIdIsSet {
  return __serialId_isset;
}

- (void) unsetSerialId {
  [__serialId release_stub];
  __serialId = nil;
  __serialId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSearchKeys: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SearchReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__searchKeys_isset) {
    if (__searchKeys != nil) {
      [outProtocol writeFieldBeginWithName: @"searchKeys" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __searchKeys];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  if (__resourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceType" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __resourceType];
    [outProtocol writeFieldEnd];
  }
  if (__serialId_isset) {
    if (__serialId != nil) {
      [outProtocol writeFieldBeginWithName: @"serialId" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __serialId];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__searchKeys_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'searchKeys' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SearchReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",searchKeys:"];
  [ms appendFormat: @"\"%@\"", __searchKeys];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @",resourceType:"];
  [ms appendFormat: @"%i", __resourceType];
  [ms appendString: @",serialId:"];
  [ms appendFormat: @"\"%@\"", __serialId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RecommendReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head startId: (int32_t) startId recordNum: (int32_t) recordNum
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RecommendReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RecommendReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AlbumReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head serialId: (NSString *) serialId startId: (int32_t) startId recordNum: (int32_t) recordNum sectionName: (NSString *) sectionName
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __serialId = [serialId retain_stub];
  __serialId_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  __sectionName = [sectionName retain_stub];
  __sectionName_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialId"])
  {
    __serialId = [[decoder decodeObjectForKey: @"serialId"] retain_stub];
    __serialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"sectionName"])
  {
    __sectionName = [[decoder decodeObjectForKey: @"sectionName"] retain_stub];
    __sectionName_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__serialId_isset)
  {
    [encoder encodeObject: __serialId forKey: @"serialId"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
  if (__sectionName_isset)
  {
    [encoder encodeObject: __sectionName forKey: @"sectionName"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__serialId release_stub];
  [__sectionName release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) serialId {
  return [[__serialId retain_stub] autorelease_stub];
}

- (void) setSerialId: (NSString *) serialId {
  [serialId retain_stub];
  [__serialId release_stub];
  __serialId = serialId;
  __serialId_isset = YES;
}

- (BOOL) serialIdIsSet {
  return __serialId_isset;
}

- (void) unsetSerialId {
  [__serialId release_stub];
  __serialId = nil;
  __serialId_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (NSString *) sectionName {
  return [[__sectionName retain_stub] autorelease_stub];
}

- (void) setSectionName: (NSString *) sectionName {
  [sectionName retain_stub];
  [__sectionName release_stub];
  __sectionName = sectionName;
  __sectionName_isset = YES;
}

- (BOOL) sectionNameIsSet {
  return __sectionName_isset;
}

- (void) unsetSectionName {
  [__sectionName release_stub];
  __sectionName = nil;
  __sectionName_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSectionName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AlbumReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serialId_isset) {
    if (__serialId != nil) {
      [outProtocol writeFieldBeginWithName: @"serialId" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __serialId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  if (__sectionName_isset) {
    if (__sectionName != nil) {
      [outProtocol writeFieldBeginWithName: @"sectionName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __sectionName];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AlbumReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",serialId:"];
  [ms appendFormat: @"\"%@\"", __serialId];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @",sectionName:"];
  [ms appendFormat: @"\"%@\"", __sectionName];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ResourcesReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head title: (NSString *) title serialId: (NSString *) serialId startId: (int32_t) startId recordNum: (int32_t) recordNum resourceType: (int) resourceType sourceType: (int) sourceType status: (int) status
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __title = [title retain_stub];
  __title_isset = YES;
  __serialId = [serialId retain_stub];
  __serialId_isset = YES;
  __startId = startId;
  __startId_isset = YES;
  __recordNum = recordNum;
  __recordNum_isset = YES;
  __resourceType = resourceType;
  __resourceType_isset = YES;
  __sourceType = sourceType;
  __sourceType_isset = YES;
  __status = status;
  __status_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain_stub];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"serialId"])
  {
    __serialId = [[decoder decodeObjectForKey: @"serialId"] retain_stub];
    __serialId_isset = YES;
  }
  if ([decoder containsValueForKey: @"startId"])
  {
    __startId = [decoder decodeInt32ForKey: @"startId"];
    __startId_isset = YES;
  }
  if ([decoder containsValueForKey: @"recordNum"])
  {
    __recordNum = [decoder decodeInt32ForKey: @"recordNum"];
    __recordNum_isset = YES;
  }
  if ([decoder containsValueForKey: @"resourceType"])
  {
    __resourceType = [decoder decodeIntForKey: @"resourceType"];
    __resourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"sourceType"])
  {
    __sourceType = [decoder decodeIntForKey: @"sourceType"];
    __sourceType_isset = YES;
  }
  if ([decoder containsValueForKey: @"status"])
  {
    __status = [decoder decodeIntForKey: @"status"];
    __status_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__serialId_isset)
  {
    [encoder encodeObject: __serialId forKey: @"serialId"];
  }
  if (__startId_isset)
  {
    [encoder encodeInt32: __startId forKey: @"startId"];
  }
  if (__recordNum_isset)
  {
    [encoder encodeInt32: __recordNum forKey: @"recordNum"];
  }
  if (__resourceType_isset)
  {
    [encoder encodeInt: __resourceType forKey: @"resourceType"];
  }
  if (__sourceType_isset)
  {
    [encoder encodeInt: __sourceType forKey: @"sourceType"];
  }
  if (__status_isset)
  {
    [encoder encodeInt: __status forKey: @"status"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__title release_stub];
  [__serialId release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) title {
  return [[__title retain_stub] autorelease_stub];
}

- (void) setTitle: (NSString *) title {
  [title retain_stub];
  [__title release_stub];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release_stub];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) serialId {
  return [[__serialId retain_stub] autorelease_stub];
}

- (void) setSerialId: (NSString *) serialId {
  [serialId retain_stub];
  [__serialId release_stub];
  __serialId = serialId;
  __serialId_isset = YES;
}

- (BOOL) serialIdIsSet {
  return __serialId_isset;
}

- (void) unsetSerialId {
  [__serialId release_stub];
  __serialId = nil;
  __serialId_isset = NO;
}

- (int32_t) startId {
  return __startId;
}

- (void) setStartId: (int32_t) startId {
  __startId = startId;
  __startId_isset = YES;
}

- (BOOL) startIdIsSet {
  return __startId_isset;
}

- (void) unsetStartId {
  __startId_isset = NO;
}

- (int32_t) recordNum {
  return __recordNum;
}

- (void) setRecordNum: (int32_t) recordNum {
  __recordNum = recordNum;
  __recordNum_isset = YES;
}

- (BOOL) recordNumIsSet {
  return __recordNum_isset;
}

- (void) unsetRecordNum {
  __recordNum_isset = NO;
}

- (int) resourceType {
  return __resourceType;
}

- (void) setResourceType: (int) resourceType {
  __resourceType = resourceType;
  __resourceType_isset = YES;
}

- (BOOL) resourceTypeIsSet {
  return __resourceType_isset;
}

- (void) unsetResourceType {
  __resourceType_isset = NO;
}

- (int) sourceType {
  return __sourceType;
}

- (void) setSourceType: (int) sourceType {
  __sourceType = sourceType;
  __sourceType_isset = YES;
}

- (BOOL) sourceTypeIsSet {
  return __sourceType_isset;
}

- (void) unsetSourceType {
  __sourceType_isset = NO;
}

- (int) status {
  return __status;
}

- (void) setStatus: (int) status {
  __status = status;
  __status_isset = YES;
}

- (BOOL) statusIsSet {
  return __status_isset;
}

- (void) unsetStatus {
  __status_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSerialId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setStartId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setRecordNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setResourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSourceType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setStatus: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ResourcesReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__serialId_isset) {
    if (__serialId != nil) {
      [outProtocol writeFieldBeginWithName: @"serialId" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __serialId];
      [outProtocol writeFieldEnd];
    }
  }
  if (__startId_isset) {
    [outProtocol writeFieldBeginWithName: @"startId" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __startId];
    [outProtocol writeFieldEnd];
  }
  if (__recordNum_isset) {
    [outProtocol writeFieldBeginWithName: @"recordNum" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __recordNum];
    [outProtocol writeFieldEnd];
  }
  if (__resourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"resourceType" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __resourceType];
    [outProtocol writeFieldEnd];
  }
  if (__sourceType_isset) {
    [outProtocol writeFieldBeginWithName: @"sourceType" type: TType_I32 fieldID: 7];
    [outProtocol writeI32: __sourceType];
    [outProtocol writeFieldEnd];
  }
  if (__status_isset) {
    [outProtocol writeFieldBeginWithName: @"status" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __status];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ResourcesReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",serialId:"];
  [ms appendFormat: @"\"%@\"", __serialId];
  [ms appendString: @",startId:"];
  [ms appendFormat: @"%i", __startId];
  [ms appendString: @",recordNum:"];
  [ms appendFormat: @"%i", __recordNum];
  [ms appendString: @",resourceType:"];
  [ms appendFormat: @"%i", __resourceType];
  [ms appendString: @",sourceType:"];
  [ms appendFormat: @"%i", __sourceType];
  [ms appendString: @",status:"];
  [ms appendFormat: @"%i", __status];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ReportReq

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithHead: (ReqHead *) head rptItem: (NSString *) rptItem
{
  self = [super init];
  __head = [head retain_stub];
  __head_isset = YES;
  __rptItem = [rptItem retain_stub];
  __rptItem_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"head"])
  {
    __head = [[decoder decodeObjectForKey: @"head"] retain_stub];
    __head_isset = YES;
  }
  if ([decoder containsValueForKey: @"rptItem"])
  {
    __rptItem = [[decoder decodeObjectForKey: @"rptItem"] retain_stub];
    __rptItem_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__head_isset)
  {
    [encoder encodeObject: __head forKey: @"head"];
  }
  if (__rptItem_isset)
  {
    [encoder encodeObject: __rptItem forKey: @"rptItem"];
  }
}

- (void) dealloc
{
  [__head release_stub];
  [__rptItem release_stub];
  [super dealloc_stub];
}

- (ReqHead *) head {
  return [[__head retain_stub] autorelease_stub];
}

- (void) setHead: (ReqHead *) head {
  [head retain_stub];
  [__head release_stub];
  __head = head;
  __head_isset = YES;
}

- (BOOL) headIsSet {
  return __head_isset;
}

- (void) unsetHead {
  [__head release_stub];
  __head = nil;
  __head_isset = NO;
}

- (NSString *) rptItem {
  return [[__rptItem retain_stub] autorelease_stub];
}

- (void) setRptItem: (NSString *) rptItem {
  [rptItem retain_stub];
  [__rptItem release_stub];
  __rptItem = rptItem;
  __rptItem_isset = YES;
}

- (BOOL) rptItemIsSet {
  return __rptItem_isset;
}

- (void) unsetRptItem {
  [__rptItem release_stub];
  __rptItem = nil;
  __rptItem_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setHead: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRptItem: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportReq"];
  if (__head_isset) {
    if (__head != nil) {
      [outProtocol writeFieldBeginWithName: @"head" type: TType_STRUCT fieldID: 1];
      [__head write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__rptItem_isset) {
    if (__rptItem != nil) {
      [outProtocol writeFieldBeginWithName: @"rptItem" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __rptItem];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__head_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'head' is not set."];
  }
  if (!__rptItem_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'rptItem' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReportReq("];
  [ms appendString: @"head:"];
  [ms appendFormat: @"%@", __head];
  [ms appendString: @",rptItem:"];
  [ms appendFormat: @"\"%@\"", __rptItem];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation shyConstants
+ (void) initialize {
}
@end

@interface userRegister_args : NSObject <TBase, NSCoding> {
  ReqHead * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation userRegister_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (ReqHead *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (ReqHead *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"userRegister_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"userRegister_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UserRegister_result : NSObject <TBase, NSCoding> {
  RegisterResp * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) RegisterResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (RegisterResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RegisterResp *) success;
- (void) setSuccess: (RegisterResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UserRegister_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (RegisterResp *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (RegisterResp *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (RegisterResp *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RegisterResp *fieldValue = [[RegisterResp alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserRegister_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserRegister_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface login_args : NSObject <TBase, NSCoding> {
  LoginReq * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) LoginReq * req;
#endif

- (id) init;
- (id) initWithReq: (LoginReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginReq *) req;
- (void) setReq: (LoginReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation login_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (LoginReq *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (LoginReq *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (LoginReq *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LoginReq *fieldValue = [[LoginReq alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <TBase, NSCoding> {
  int32_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int32_t success;
#endif

- (id) init;
- (id) initWithSuccess: (int32_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (int32_t) success;
- (void) setSuccess: (int32_t) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (int32_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt32ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt32: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) success {
  return __success;
}

- (void) setSuccess: (int32_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I32 fieldID: 0];
    [outProtocol writeI32: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface getAuthSeed_args : NSObject <TBase, NSCoding> {
  ReqHead * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getAuthSeed_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (ReqHead *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (ReqHead *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"getAuthSeed_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"getAuthSeed_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface GetAuthSeed_result : NSObject <TBase, NSCoding> {
  NSString * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSString * success;
#endif

- (id) init;
- (id) initWithSuccess: (NSString *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (NSString *) success;
- (void) setSuccess: (NSString *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAuthSeed_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (NSString *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (NSString *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (NSString *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetAuthSeed_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRING fieldID: 0];
      [outProtocol writeString: __success];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetAuthSeed_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"\"%@\"", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <TBase, NSCoding> {
  ReqHead * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation logout_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (ReqHead *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (ReqHead *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface updateConfig_args : NSObject <TBase, NSCoding> {
  ReqHead * __req;

  BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation updateConfig_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithReq: (ReqHead *) req
{
  self = [super init];
  __req = [req retain_stub];
  __req_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"req"])
  {
    __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
    __req_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__req_isset)
  {
    [encoder encodeObject: __req forKey: @"req"];
  }
}

- (void) dealloc
{
  [__req release_stub];
  [super dealloc_stub];
}

- (ReqHead *) req {
  return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
  [req retain_stub];
  [__req release_stub];
  __req = req;
  __req_isset = YES;
}

- (BOOL) reqIsSet {
  return __req_isset;
}

- (void) unsetReq {
  [__req release_stub];
  __req = nil;
  __req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          ReqHead *fieldValue = [[ReqHead alloc] init];
          [fieldValue read: inProtocol];
          [self setReq: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"updateConfig_args"];
  if (__req_isset) {
    if (__req != nil) {
      [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
      [__req write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"updateConfig_args("];
  [ms appendString: @"req:"];
  [ms appendFormat: @"%@", __req];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UpdateConfig_result : NSObject <TBase, NSCoding> {
  UserConfig * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserConfig * success;
#endif

- (id) init;
- (id) initWithSuccess: (UserConfig *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UserConfig *) success;
- (void) setSuccess: (UserConfig *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateConfig_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UserConfig *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UserConfig *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UserConfig *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserConfig *fieldValue = [[UserConfig alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateConfig_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateConfig_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_userRegister: (ReqHead *) req
{
  [outProtocol writeMessageBeginWithName: @"userRegister" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"userRegister_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RegisterResp *) recv_userRegister
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UserRegister_result * result = [[[UserRegister_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"userRegister failed: unknown result"];
}

- (RegisterResp *) userRegister: (ReqHead *) req
{
  [self send_userRegister : req];
  return [self recv_userRegister];
}

- (void) send_login: (LoginReq *) req
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int32_t) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (int32_t) login: (LoginReq *) req
{
  [self send_login : req];
  return [self recv_login];
}

- (void) send_getAuthSeed: (ReqHead *) req
{
  [outProtocol writeMessageBeginWithName: @"getAuthSeed" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getAuthSeed_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSString *) recv_getAuthSeed
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetAuthSeed_result * result = [[[GetAuthSeed_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getAuthSeed failed: unknown result"];
}

- (NSString *) getAuthSeed: (ReqHead *) req
{
  [self send_getAuthSeed : req];
  return [self recv_getAuthSeed];
}

- (void) send_logout: (ReqHead *) req
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) logout: (ReqHead *) req
{
  [self send_logout : req];
}

- (void) send_updateConfig: (ReqHead *) req
{
  [outProtocol writeMessageBeginWithName: @"updateConfig" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"updateConfig_args"];
  if (req != nil)  {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UserConfig *) recv_updateConfig
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UpdateConfig_result * result = [[[UpdateConfig_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"updateConfig failed: unknown result"];
}

- (UserConfig *) updateConfig: (ReqHead *) req
{
  [self send_updateConfig : req];
  return [self recv_updateConfig];
}

@end

@implementation UserManagerProcessor

- (id) initWithUserManager: (id <UserManager>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_userRegister_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"userRegister"];
  }
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_getAuthSeed_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"getAuthSeed"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  {
    SEL s = @selector(process_updateConfig_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"updateConfig"];
  }
  return self;
}

- (id<UserManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_userRegister_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  userRegister_args * args = [[userRegister_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UserRegister_result * result = [[UserRegister_result alloc] init];
  [result setSuccess: [mService userRegister: [args req]]];
  [outProtocol writeMessageBeginWithName: @"userRegister"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args req]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_getAuthSeed_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  getAuthSeed_args * args = [[getAuthSeed_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  GetAuthSeed_result * result = [[GetAuthSeed_result alloc] init];
  [result setSuccess: [mService getAuthSeed: [args req]]];
  [outProtocol writeMessageBeginWithName: @"getAuthSeed"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  [mService logout: [args req]];
  [args release_stub];
}

- (void) process_updateConfig_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  updateConfig_args * args = [[updateConfig_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UpdateConfig_result * result = [[UpdateConfig_result alloc] init];
  [result setSuccess: [mService updateConfig: [args req]]];
  [outProtocol writeMessageBeginWithName: @"updateConfig"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

@interface search_args : NSObject <TBase, NSCoding> {
SearchReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) SearchReq * req;
#endif

- (id) init;
- (id) initWithReq: (SearchReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (SearchReq *) req;
- (void) setReq: (SearchReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation search_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (SearchReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (SearchReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (SearchReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        SearchReq *fieldValue = [[SearchReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"search_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"search_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface Search_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation Search_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"Search_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"Search_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getRecommendSongs_args : NSObject <TBase, NSCoding> {
RecommendReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) RecommendReq * req;
#endif

- (id) init;
- (id) initWithReq: (RecommendReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecommendReq *) req;
- (void) setReq: (RecommendReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getRecommendSongs_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (RecommendReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (RecommendReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (RecommendReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        RecommendReq *fieldValue = [[RecommendReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getRecommendSongs_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getRecommendSongs_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetRecommendSongs_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetRecommendSongs_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetRecommendSongs_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendSongs_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getRecommendCartoons_args : NSObject <TBase, NSCoding> {
RecommendReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) RecommendReq * req;
#endif

- (id) init;
- (id) initWithReq: (RecommendReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecommendReq *) req;
- (void) setReq: (RecommendReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getRecommendCartoons_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (RecommendReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (RecommendReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (RecommendReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        RecommendReq *fieldValue = [[RecommendReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getRecommendCartoons_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getRecommendCartoons_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetRecommendCartoons_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetRecommendCartoons_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetRecommendCartoons_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendCartoons_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getRecommendTVs_args : NSObject <TBase, NSCoding> {
RecommendReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) RecommendReq * req;
#endif

- (id) init;
- (id) initWithReq: (RecommendReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (RecommendReq *) req;
- (void) setReq: (RecommendReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getRecommendTVs_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (RecommendReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (RecommendReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (RecommendReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        RecommendReq *fieldValue = [[RecommendReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getRecommendTVs_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getRecommendTVs_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetRecommendTVs_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetRecommendTVs_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetRecommendTVs_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetRecommendTVs_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getAlbum_args : NSObject <TBase, NSCoding> {
AlbumReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) AlbumReq * req;
#endif

- (id) init;
- (id) initWithReq: (AlbumReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (AlbumReq *) req;
- (void) setReq: (AlbumReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getAlbum_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (AlbumReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (AlbumReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (AlbumReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        AlbumReq *fieldValue = [[AlbumReq alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getAlbum_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getAlbum_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetAlbum_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetAlbum_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetAlbum_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetAlbum_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface getSearchRecommend_args : NSObject <TBase, NSCoding> {
ReqHead * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReqHead * req;
#endif

- (id) init;
- (id) initWithReq: (ReqHead *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReqHead *) req;
- (void) setReq: (ReqHead *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation getSearchRecommend_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ReqHead *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
  __req = [[decoder decodeObjectForKey: @"req"] retain_stub];
  __req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
  [encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ReqHead *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReqHead *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        ReqHead *fieldValue = [[ReqHead alloc] init];
        [fieldValue read: inProtocol];
        [self setReq: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"getSearchRecommend_args"];
if (__req_isset) {
  if (__req != nil) {
    [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
    [__req write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"getSearchRecommend_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@interface GetSearchRecommend_result : NSObject <TBase, NSCoding> {
ResourceResp * __success;

BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) ResourceResp * success;
#endif

- (id) init;
- (id) initWithSuccess: (ResourceResp *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ResourceResp *) success;
- (void) setSuccess: (ResourceResp *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation GetSearchRecommend_result

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithSuccess: (ResourceResp *) success
{
self = [super init];
__success = [success retain_stub];
__success_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"success"])
{
  __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
  __success_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__success_isset)
{
  [encoder encodeObject: __success forKey: @"success"];
}
}

- (void) dealloc
{
[__success release_stub];
[super dealloc_stub];
}

- (ResourceResp *) success {
return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (ResourceResp *) success {
[success retain_stub];
[__success release_stub];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release_stub];
__success = nil;
__success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        ResourceResp *fieldValue = [[ResourceResp alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release_stub];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetSearchRecommend_result"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetSearchRecommend_result("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ResourceManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_search: (SearchReq *) req
{
[outProtocol writeMessageBeginWithName: @"search" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"search_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_search
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
Search_result * result = [[[Search_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"search failed: unknown result"];
}

- (ResourceResp *) search: (SearchReq *) req
{
[self send_search : req];
return [self recv_search];
}

- (void) send_getRecommendSongs: (RecommendReq *) req
{
[outProtocol writeMessageBeginWithName: @"getRecommendSongs" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getRecommendSongs_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_getRecommendSongs
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetRecommendSongs_result * result = [[[GetRecommendSongs_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getRecommendSongs failed: unknown result"];
}

- (ResourceResp *) getRecommendSongs: (RecommendReq *) req
{
[self send_getRecommendSongs : req];
return [self recv_getRecommendSongs];
}

- (void) send_getRecommendCartoons: (RecommendReq *) req
{
[outProtocol writeMessageBeginWithName: @"getRecommendCartoons" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getRecommendCartoons_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_getRecommendCartoons
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetRecommendCartoons_result * result = [[[GetRecommendCartoons_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getRecommendCartoons failed: unknown result"];
}

- (ResourceResp *) getRecommendCartoons: (RecommendReq *) req
{
[self send_getRecommendCartoons : req];
return [self recv_getRecommendCartoons];
}

- (void) send_getRecommendTVs: (RecommendReq *) req
{
[outProtocol writeMessageBeginWithName: @"getRecommendTVs" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getRecommendTVs_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_getRecommendTVs
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetRecommendTVs_result * result = [[[GetRecommendTVs_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getRecommendTVs failed: unknown result"];
}

- (ResourceResp *) getRecommendTVs: (RecommendReq *) req
{
[self send_getRecommendTVs : req];
return [self recv_getRecommendTVs];
}

- (void) send_getAlbum: (AlbumReq *) req
{
[outProtocol writeMessageBeginWithName: @"getAlbum" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getAlbum_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_getAlbum
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetAlbum_result * result = [[[GetAlbum_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getAlbum failed: unknown result"];
}

- (ResourceResp *) getAlbum: (AlbumReq *) req
{
[self send_getAlbum : req];
return [self recv_getAlbum];
}

- (void) send_getSearchRecommend: (ReqHead *) req
{
[outProtocol writeMessageBeginWithName: @"getSearchRecommend" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getSearchRecommend_args"];
if (req != nil){
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [req write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (ResourceResp *) recv_getSearchRecommend
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetSearchRecommend_result * result = [[[GetSearchRecommend_result alloc] init] autorelease_stub];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getSearchRecommend failed: unknown result"];
}

- (ResourceResp *) getSearchRecommend: (ReqHead *) req
{
[self send_getSearchRecommend : req];
return [self recv_getSearchRecommend];
}

@end

@implementation ResourceManagerProcessor

- (id) initWithResourceManager: (id <ResourceManager>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
  SEL s = @selector(process_search_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"search"];
}
{
  SEL s = @selector(process_getRecommendSongs_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getRecommendSongs"];
}
{
  SEL s = @selector(process_getRecommendCartoons_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getRecommendCartoons"];
}
{
  SEL s = @selector(process_getRecommendTVs_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getRecommendTVs"];
}
{
  SEL s = @selector(process_getAlbum_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getAlbum"];
}
{
  SEL s = @selector(process_getSearchRecommend_withSequenceID:inProtocol:outProtocol:);
  NSMethodSignature * sig = [self methodSignatureForSelector: s];
  NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
  [invocation setSelector: s];
  [invocation retainArguments];
  [mMethodMap setValue: invocation forKey: @"getSearchRecommend"];
}
return self;
}

- (id<ResourceManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_search_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
search_args * args = [[search_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
Search_result * result = [[Search_result alloc] init];
[result setSuccess: [mService search: [args req]]];
[outProtocol writeMessageBeginWithName: @"search"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getRecommendSongs_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getRecommendSongs_args * args = [[getRecommendSongs_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetRecommendSongs_result * result = [[GetRecommendSongs_result alloc] init];
[result setSuccess: [mService getRecommendSongs: [args req]]];
[outProtocol writeMessageBeginWithName: @"getRecommendSongs"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getRecommendCartoons_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getRecommendCartoons_args * args = [[getRecommendCartoons_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetRecommendCartoons_result * result = [[GetRecommendCartoons_result alloc] init];
[result setSuccess: [mService getRecommendCartoons: [args req]]];
[outProtocol writeMessageBeginWithName: @"getRecommendCartoons"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getRecommendTVs_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getRecommendTVs_args * args = [[getRecommendTVs_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetRecommendTVs_result * result = [[GetRecommendTVs_result alloc] init];
[result setSuccess: [mService getRecommendTVs: [args req]]];
[outProtocol writeMessageBeginWithName: @"getRecommendTVs"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getAlbum_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getAlbum_args * args = [[getAlbum_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetAlbum_result * result = [[GetAlbum_result alloc] init];
[result setSuccess: [mService getAlbum: [args req]]];
[outProtocol writeMessageBeginWithName: @"getAlbum"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) process_getSearchRecommend_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
getSearchRecommend_args * args = [[getSearchRecommend_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
GetSearchRecommend_result * result = [[GetSearchRecommend_result alloc] init];
[result setSuccess: [mService getSearchRecommend: [args req]]];
[outProtocol writeMessageBeginWithName: @"getSearchRecommend"
                                  type: TMessageType_REPLY
                            sequenceID: seqID];
[result write: outProtocol];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
[result release_stub];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

@interface report_args : NSObject <TBase, NSCoding> {
ReportReq * __req;

BOOL __req_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=req, setter=setReq:) ReportReq * req;
#endif

- (id) init;
- (id) initWithReq: (ReportReq *) req;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (ReportReq *) req;
- (void) setReq: (ReportReq *) req;
#endif
- (BOOL) reqIsSet;

@end

@implementation report_args

- (id) init
{
self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
return self;
}

- (id) initWithReq: (ReportReq *) req
{
self = [super init];
__req = [req retain_stub];
__req_isset = YES;
return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
self = [super init];
if ([decoder containsValueForKey: @"req"])
{
__req = [[decoder decodeObjectForKey: @"req"] retain_stub];
__req_isset = YES;
}
return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
if (__req_isset)
{
[encoder encodeObject: __req forKey: @"req"];
}
}

- (void) dealloc
{
[__req release_stub];
[super dealloc_stub];
}

- (ReportReq *) req {
return [[__req retain_stub] autorelease_stub];
}

- (void) setReq: (ReportReq *) req {
[req retain_stub];
[__req release_stub];
__req = req;
__req_isset = YES;
}

- (BOOL) reqIsSet {
return __req_isset;
}

- (void) unsetReq {
[__req release_stub];
__req = nil;
__req_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 1:
    if (fieldType == TType_STRUCT) {
      ReportReq *fieldValue = [[ReportReq alloc] init];
      [fieldValue read: inProtocol];
      [self setReq: fieldValue];
      [fieldValue release_stub];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"report_args"];
if (__req_isset) {
if (__req != nil) {
  [outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
  [__req write: outProtocol];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (void) validate {
// check for required fields
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"report_args("];
[ms appendString: @"req:"];
[ms appendFormat: @"%@", __req];
[ms appendString: @")"];
return [NSString stringWithString: ms];
}

@end

@implementation ReportManagerClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
self = [super init];
inProtocol = [anInProtocol retain_stub];
outProtocol = [anOutProtocol retain_stub];
return self;
}

- (void) dealloc
{
[inProtocol release_stub];
[outProtocol release_stub];
[super dealloc_stub];
}

- (void) send_report: (ReportReq *) req
{
[outProtocol writeMessageBeginWithName: @"report" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"report_args"];
if (req != nil){
[outProtocol writeFieldBeginWithName: @"req" type: TType_STRUCT fieldID: 1];
[req write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) report: (ReportReq *) req
{
[self send_report : req];
}

@end

@implementation ReportManagerProcessor

- (id) initWithReportManager: (id <ReportManager>) service
{
self = [super init];
if (!self) {
  return nil;
}
mService = [service retain_stub];
mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
{
SEL s = @selector(process_report_withSequenceID:inProtocol:outProtocol:);
NSMethodSignature * sig = [self methodSignatureForSelector: s];
NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
[invocation setSelector: s];
[invocation retainArguments];
[mMethodMap setValue: invocation forKey: @"report"];
}
return self;
}

- (id<ReportManager>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_report_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
report_args * args = [[report_args alloc] init];
[args read: inProtocol];
[inProtocol readMessageEnd];
[mService report: [args req]];
[args release_stub];
}

- (void) dealloc
{
[mService release_stub];
[mMethodMap release_stub];
[super dealloc_stub];
}

@end

